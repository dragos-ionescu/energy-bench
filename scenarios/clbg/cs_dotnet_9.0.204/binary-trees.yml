implementation: cs
name: binary-trees
description: | # https://benchmarksgame-team.pages.debian.net/benchmarksgame/description/binarytrees.html#binarytrees
    ## Background
    A simplistic adaptation of [Hans Boehm's GCBench](http://hboehm.info/gc/gc_bench/), which in turn was adapted from a benchmark by John Ellis and Pete Kovac.
    Thanks to Christophe Troestler and Einar Karttunen for help with this benchmark.

    ## Variance
    When possible, use default GC; otherwise use per node allocation or use a library memory pool.
    As a practical matter, the myriad ways to tune GC will not be accepted.
    As a practical matter, the myriad ways to custom allocate memory will not be accepted.
    Please don't implement your own custom ["arena"](http://www.stroustrup.com/bs_faq2.html#placement-delete) or "memory pool" or "free list" - they will not be accepted.

    ## The work
    The work is to fully create perfect binary trees - before any tree nodes are GC'd - using at-minimum the number of allocations of [Jeremy Zerfas's C program](https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/binarytrees-gcc-3.html). Don't optimize away the work.
    Leaf nodes must be the same as interior nodes - the same memory allocation. Don't optimize away the work.

    ## How to implement
    We ask that contributed programs not only give the correct result, but also **use the same algorithm** to calculate that result.
    Each program should:
    - define a tree node class and methods, or a tree node record and procedures, or an algebraic data type and functions, orâ€¦
    - allocate a binary tree to 'stretch' memory, check it exists, and deallocate it
    - allocate a long-lived binary tree which will live-on while other trees are allocated and deallocated
    - allocate, walk, and deallocate many bottom-up binary trees
        - allocate a tree
        - walk the tree, counting the nodes (and maybe deallocate the nodes)
        - deallocate the tree
    - check that the long-lived binary tree still exists

    **diff** program output N = 10 with this 1KB [output file](https://benchmarksgame-team.pages.debian.net/benchmarksgame/download/binarytrees-output.txt) to check your program output has the correct format, before you [contribute your program](https://salsa.debian.org/benchmarksgame-team/benchmarksgame/blob/master/README.md).
    Use a larger command line argument (21) to check program performance.
    Thanks to Eamon Nerbonne for repeatedly showing what was wrong with the old way of checking these programs, and to Brad Chamberlain for suggesting that a simple check should work.
code: | # https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/binarytrees-csharpaot-2.html
    // The Computer Language Benchmarks Game
    // https://benchmarksgame-team.pages.debian.net/benchmarksgame/
    //
    // based Jarkko Miettinen Java #2 and Anthony Lloyd C#
    // contributed by Isaac Gouy

    using System;
    using System.Threading.Tasks;
    using System.Runtime.InteropServices;

    class Program
    {
        [DllImport("libenergy_signal", EntryPoint = "start_signal")]
        private static extern bool start_signal();

        [DllImport("libenergy_signal", EntryPoint = "stop_signal")]
        private static extern void stop_signal();

        const int MinDepth = 4;
        const int NoTasks = 4;

        public static void Main(string[] args)
        {
            while (start_signal())
            {
                run_benchmark(args);
                stop_signal();
            }
        }

        private static void run_benchmark(string[] args)
        {
            int maxDepth = args.Length == 0 ? 10
                : Math.Max(MinDepth + 2, int.Parse(args[0]));

            Console.WriteLine(string.Concat("stretch tree of depth ", maxDepth + 1,
                "\t check: ", (TreeNode.bottomUpTree(maxDepth + 1)).itemCheck()));

            var longLivedTree = TreeNode.bottomUpTree(maxDepth);

            var results = new string[(maxDepth - MinDepth) / 2 + 1];

            for (int i = 0; i < results.Length; i++)
            {
                int depth = i * 2 + MinDepth;
                int n = (1 << maxDepth - depth + MinDepth) / NoTasks;
                var tasks = new Task<int>[NoTasks];
                for (int t = 0; t < tasks.Length; t++)
                {
                    tasks[t] = Task.Run(() =>
                    {
                        var check = 0;
                        for (int i = n; i > 0; i--)
                            check += (TreeNode.bottomUpTree(depth)).itemCheck();
                        return check;
                    });
                }
                var check = tasks[0].Result;
                for (int t = 1; t < tasks.Length; t++)
                    check += tasks[t].Result;
                results[i] = string.Concat(n * NoTasks, "\t trees of depth ",
                    depth, "\t check: ", check);
            }
            for (int i = 0; i < results.Length; i++)
                Console.WriteLine(results[i]);

            Console.WriteLine(string.Concat("long lived tree of depth ", maxDepth,
                "\t check: ", longLivedTree.itemCheck()));
        }

        private class TreeNode
        {
            readonly TreeNode left, right;

            internal static TreeNode bottomUpTree(int depth)
            {
                if (depth > 0) {
                    return new TreeNode(
                        bottomUpTree(depth - 1),
                            bottomUpTree(depth - 1));
                } else {
                    return new TreeNode(null,null);
                }
            }

            internal TreeNode(TreeNode left, TreeNode right)
            {
                this.left = left;
                this.right = right;
            }

            internal int itemCheck()
            {
                if (left == null) return 1;
                else return 1 + left.itemCheck() + right.itemCheck();
            }
        }
    }
dependencies:
    - name: dotnet-sdk_9
      version: 9.0.203
target_framework: net9.0
options:
    - -c Release
    - -p:OutputType=Exe
    - -p:ImplicitUsings=enable
    - -p:Nullable=enable
    - -p:AllowUnsafeBlocks=true
    - -p:ServerGarbageCollection=true
    - -p:ConcurrentGarbageCollection=true
    - -p:OptimizationPreference=Speed
    - -p:IlcInstructionSet=native
---
args: [21]
expected_stdout: |
    stretch tree of depth 22	 check: 8388607
    2097152	 trees of depth 4	 check: 65011712
    524288	 trees of depth 6	 check: 66584576
    131072	 trees of depth 8	 check: 66977792
    32768	 trees of depth 10	 check: 67076096
    8192	 trees of depth 12	 check: 67100672
    2048	 trees of depth 14	 check: 67106816
    512	 trees of depth 16	 check: 67108352
    128	 trees of depth 18	 check: 67108736
    32	 trees of depth 20	 check: 67108832
    long lived tree of depth 21	 check: 4194303
