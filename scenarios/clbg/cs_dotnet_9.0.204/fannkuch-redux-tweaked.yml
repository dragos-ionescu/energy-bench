implementation: cs
name: fannkuch-redux-tweaked
description: | # https://benchmarksgame-team.pages.debian.net/benchmarksgame/description/fannkuchredux.html#fannkuchredux
    The fannkuch benchmark is defined by programs in [pdf]Performing Lisp Analysis of the FANNKUCH Benchmark, Kenneth R. Anderson and Duane Rettig. FANNKUCH is an abbreviation for the German word Pfannkuchen, or pancakes, in analogy to flipping pancakes. The conjecture is that the maximum count is approximated by n*log(n) when n goes to infinity.
    We ask that contributed programs not only give the correct result, but also **use the same algorithm** to calculate that result.
    Each program should:
        - Take a permutation of {1,...,n}, for example: {4,2,1,5,3}.
        - Take the first element, here 4, and reverse the order of the first 4 elements: {5,1,2,4,3}.
        - Repeat this until the first element is a 1, so flipping won't change anything more: {3,4,2,1,5}, {2,4,3,1,5}, {4,2,3,1,5}, {1,3,2,4,5}.
        - Count the number of flips, here 5.
        - Keep a checksum
            - checksum = checksum + (if permutation_index is even then flips_count else -flips_count)
            - checksum = checksum + (toggle_sign_-1_1 * flips_count)
        - Do this for all n! permutations, and record the maximum number of flips needed for any permutation.
code: | # https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/fannkuchredux-csharpaot-9.html
    // The Computer Language Benchmarks Game
    // https://benchmarksgame-team.pages.debian.net/benchmarksgame/
    //
    // contributed by Flim Nik
    // small optimisations by Anthony Lloyd

    using System;
    using System.Linq;
    using System.Runtime.CompilerServices;
    using System.Threading;

    using System.Runtime.InteropServices;

    public unsafe static class Program
    {
        [DllImport("libenergy_signal", EntryPoint = "start_signal")]
        private static extern bool start_signal();

        [DllImport("libenergy_signal", EntryPoint = "stop_signal")]
        private static extern void stop_signal();

        static int taskCount;
        static int[] fact, chkSums, maxFlips;

        static void FirstPermutation(short* p, short* pp, int* count, int n, int idx)
        {
            for (int i = 0; i < n; ++i) p[i] = (byte)i;
            for (int i = n - 1; i > 0; --i)
            {
                int d = idx / fact[i];
                count[i] = d;
                if (d > 0)
                {
                    idx %= fact[i];
                    for (int j = i; j >= 0; --j) pp[j] = p[j];
                    for (int j = 0; j <= i; ++j) p[j] = pp[(j + d) % (i + 1)];
                }
            }
        }

        static void NextPermutation(short* p, int* count)
        {
            var first = p[1];
            p[1] = p[0];
            p[0] = first;
            int i = 1;
            while (++count[i] > i)
            {
                count[i++] = 0;
                var next = p[1];
                p[0] = next;
                for (int j = 1; j < i;) p[j] = p[++j];
                p[i] = first;
                first = next;
            }
        }

        static void Copy(short* p, short* pp, int n)
        {
            var startL = (long*)p;
            var stateL = (long*)pp;
            var lengthL = n / 4;
            int i = 0;
            for (; i < lengthL; i++)
            {
                stateL[i] = startL[i];
            }
            for (i = lengthL * 4; i < n; i++)
            {
                pp[i] = p[i];
            }
        }

        static int CountFlips(short* p, short* pp, int n)
        {
            int flips = 1;
            int first = *p;
            short temp;
            if (p[first] != 0)
            {
                Copy(p, pp, n);
                do
                {
                    ++flips;
                    if (first > 2)
                    {
                        short* lo = pp + 1, hi = pp + first - 1;
                        do
                        {
                            temp = *lo;
                            *lo = *hi;
                            *hi = temp;
                        } while (++lo < --hi);
                    }
                    temp = pp[first];
                    pp[first] = (short)first;
                    first = temp;
                } while (pp[first] != 0);
            }
            return flips;
        }

        static void Run(int n, int taskSize)
        {
            int* count = stackalloc int[n];
            int taskId, chksum = 0, maxflips = 0;
            short* p = stackalloc short[n];
            short* pp = stackalloc short[n];
            while ((taskId = Interlocked.Decrement(ref taskCount)) >= 0)
            {
                FirstPermutation(p, pp, count, n, taskId * taskSize);
                if (*p != 0)
                {
                    var flips = CountFlips(p, pp, n);
                    chksum += flips;
                    if (flips > maxflips) maxflips = flips;
                }
                for (int i = 1; i < taskSize; i++)
                {
                    NextPermutation(p, count);
                    if (*p != 0)
                    {
                        var flips = CountFlips(p, pp, n);
                        chksum += (1 - (i & 1) * 2) * flips;
                        if (flips > maxflips) maxflips = flips;
                    }
                }
            }
            chkSums[-taskId - 1] = chksum;
            maxFlips[-taskId - 1] = maxflips;
        }

        private static void run_benchmark(string[] args)
        {
            int n = args.Length > 0 ? int.Parse(args[0]) : 7;
            fact = new int[n + 1];
            fact[0] = 1;

            for (int i = 1; i < fact.Length; i++)
            {
                fact[i] = fact[i - 1] * i;
            }

            var PC = Environment.ProcessorCount;
            taskCount = n > 11 ? fact[n] / (9 * 8 * 7 * 6 * 5 * 4 * 3 * 2) : PC;
            int taskSize = fact[n] / taskCount;
            chkSums = new int[PC];
            maxFlips = new int[PC];
            var threads = new Thread[PC];
            for (int i = 1; i < PC; i++)
            {
                (threads[i] = new Thread(() => Run(n, taskSize))).Start();
            }
            Run(n, taskSize);

            for (int i = 1; i < threads.Length; i++)
            {
                threads[i].Join();
            }
            Console.WriteLine(chkSums.Sum() + "\nPfannkuchen(" + n + ") = " + maxFlips.Max());
        }

        public static void Main(string[] args)
        {
            while (start_signal())
            {
                run_benchmark(args);
                stop_signal();
            }
        }
    }
dependencies:
    - name: dotnet-sdk
target_framework: net8.0
options:
    - -c Release
    - -p:OutputType=Exe
    - -p:ImplicitUsings=enable
    - -p:Nullable=enable
    - -p:AllowUnsafeBlocks=true
    - -p:ServerGarbageCollection=true
    - -p:ConcurrentGarbageCollection=true
    - -p:OptimizationPreference=Speed
    - -p:IlcInstructionSet=native
---
args: [12]
expected_stdout: |
    3968050
    Pfannkuchen(12) = 65
