implementation: c
name: reverse-complement
description: | # https://benchmarksgame-team.pages.debian.net/benchmarksgame/description/revcomp.html#revcomp
    ## Background
    > … by knowing the sequence of bases of one strand of DNA we immediately know the sequence of the DNA strand which will bind to it, this strand is called the reverse complement …

    [HN discussion](https://news.ycombinator.com/item?id=25641901)

    ## How to implement
    We ask that contributed programs not only give the correct result, but also **use the same algorithm** to calculate that result.
    Each program should:
    - read line-by-line a redirected [FASTA format](http://en.wikipedia.org/wiki/Fasta_format) file from stdin
      (grow the data, buffered-read by buffered-read; don't get the size and make a single allocation.)
    - for each sequence:
      - write the id, description, and the reverse-complement sequence in [FASTA format](http://en.wikipedia.org/wiki/Fasta_format) to stdout

    Use these code complements:
    code  meaning   complement
    A     A         T
    C     C         G
    G     G         C
    T/U   T         A
    M     A or C    K
    R     A or G    Y
    W     A or T    W
    S     C or G    S
    Y     C or T    R
    K     G or T    M
    V     A or C or G   B
    H     A or C or T   D
    D     A or G or T   H
    B     C or G or T   V
    N     G or A or T or C   N

    **diff** program output for this 10KB [input file](https://benchmarksgame-team.pages.debian.net/benchmarksgame/download/revcomp-input.txt) (generated with the [fasta program](https://benchmarksgame-team.pages.debian.net/benchmarksgame/performance/fasta.html) N = 1000) with this [output file](https://benchmarksgame-team.pages.debian.net/benchmarksgame/download/revcomp-output.txt) to check your program output has the correct format, before you [contribute your program](https://salsa.debian.org/benchmarksgame-team/benchmarksgame/blob/master/README.md).
    Generate a larger input file (using one of the [fasta programs](https://benchmarksgame-team.pages.debian.net/benchmarksgame/performance/fasta.html) with command line arguments:
    `25000000 > input25000000.txt`) to check program performance.
code: | # https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/revcomp-gcc-9.html
    // The Computer Language Benchmarks Game
    // https://salsa.debian.org/benchmarksgame-team/benchmarksgame/
    //
    // Contributed by Jeremy Zerfas.
    // Copied the idea to use a lookup table for reverse complementing two
    // characters at a time from roman blog's C++ program.

    // Here's a high level overview of how this program works to help you better
    // understand this code, the notation being used for variable/function names,
    // and the comments. The main thread reads in sequences one at a time from
    // standard input and when the end of a sequence is found (indicated by the
    // start of another sequence or the end of input), one or more new threads are
    // created to then fully process that sequence before the main thread continues
    // reading any additional sequences. The sequence is split up into chunks of a
    // modest size, the chunks are processed starting with the ones at the end of
    // the sequence and proceeding to the ones at the front of the sequence, and
    // multiple chunks can be processed in parallel. The processing of chunks is
    // considered to be being handled in three steps, first a chunk gets assigned to
    // a thread, then the chunk is reverse complemented, and finally the chunk is
    // written. A little extra care needs to be taken with the last step in order to
    // ensure that the chunks are being written in the correct order.
    //
    // There are also a few more additional noteworthy optimizations being used by
    // this program. During the reverse complementing step, characters can be
    // reversed complemented two at a time instead of one at a time by making use of
    // a modestly sized lookup table that is quickly computed when first starting
    // the program. Before reverse complementing chunks, the program checks to see
    // if the sequence is an optimally sized one that consists of only full lines
    // and if that is the case it allows a simpler/faster code path to be used to do
    // the reverse complementing since it makes it unnecessary to move newlines
    // around in the sequence. Finally to help minimize reading/writing to main
    // memory and to reduce memory usage, instead of doing an in-place reverse
    // complement of a sequence or creating a reversed complemented copy of the
    // whole sequence, each thread writes reverse complemented chunks to a
    // per-thread chunk sized area of memory (which will likely be cached) and then
    // writes the reversed complemented chunks from there.


    // This string/character array is used to convert characters into the
    // complementing character. Note that some of the reverse complementing code
    // also requires newlines to remain unchanged when complemented which is why the
    // eleventh character is set to a newline.
    #define COMPLEMENT_LOOKUP \
      "          \n                                                     "\
      /*ABCDEFGHIJKLMNOPQRSTUVWXYZ      abcdefghijklmnopqrstuvwxyz*/\
      " TVGH  CD  M KN   YSAABW R       TVGH  CD  M KN   YSAABW R"

    // This controls the size of reads from the input and is also used as the
    // initial sequence_Capacity.
    #define READ_SIZE 65536

    // This defines how many characters (including the newline) a full line of input
    // should have.
    #define LINE_LENGTH 61

    // While processing a sequence, the sequence is broken up into chunks which can
    // be processed in parallel on computers with multiple CPU cores.
    // LINES_PER_CHUNK will set the maximum amount of lines that are allowed in each
    // chunk and consequently the maximum size of each chunk will be equal to
    // LINES_PER_CHUNK*LINE_LENGTH bytes in size. Each thread will create an array
    // on the stack that is large enough to contain these chunks so LINES_PER_CHUNK
    // must be set small enough to allow this array to fit inside the stack. For
    // best performance, this value should probably be set so that the maximum chunk
    // size is somewhere between the L1 data cache size and
    // 1/(2*NUMBER_OF_CPU_CORES) of the last level cache size (assuming each CPU
    // core has its own L1 cache and the last level cache is shared between CPU
    // cores).
    #define LINES_PER_CHUNK 8192

    #include <stdint.h>
    #include <pthread.h>
    #include <stdio.h>
    #include <unistd.h>
    #include <stdlib.h>
    #include <string.h>
    #include <energy_signal.h>

    // uintptr_t should be the native integer type on most sane systems.
    typedef uintptr_t uintnative_t;


    // REVERSE_COMPLEMENT_LOOKUP will be used by the
    // reverse_Complement_And_Move_Span() function to help speed up reverse
    // complementing by allowing two characters to be reversed and complemented at
    // once.
    uint16_t REVERSE_COMPLEMENT_LOOKUP[65536];


    // Since sequences can be broken up into chunks that can be processed in
    // parallel by multiple threads, we need a few shared variables amongst the
    // threads to coordinate the processing. shared_Variables_Mutex is used to make
    // sure only one thread is reading/writing the other variables at a time.
    // sequence_Characters_Left_To_Assign is self explanatory. Processing of the
    // sequence starts at the rear and proceeds to the header_Newline in front of
    // the sequence. Since processing is split up into a couple steps,
    // front_Character_Of_Last_Assigned_Chunk and
    // front_Character_Of_Last_Written_Chunk are used to separately keep track of
    // the positions of the last assigned and written chunks. The chunks need to be
    // written in the correct order after they are reverse complemented so threads
    // may need to wait for other threads to finish writing their chunks first,
    // write_Finished_Condition is used by the threads to let threads that are
    // waiting know when a chunk is written by another thread so they can check to
    // see if they should then write their own chunks.
    pthread_mutex_t shared_Variables_Mutex=PTHREAD_MUTEX_INITIALIZER;
    uintnative_t sequence_Characters_Left_To_Assign;
    uint8_t * front_Character_Of_Last_Assigned_Chunk
      , * front_Character_Of_Last_Written_Chunk;
    pthread_cond_t write_Finished_Condition=PTHREAD_COND_INITIALIZER;


    // Reverse complement and move a span of characters. The span to be reverse
    // complemented ends just before character_After_Src_Rear_Character and the
    // reverse complemented span is moved so that its first character will be at
    // dst_Front_Character. The size of the spans is span_Length characters long.
    void reverse_Complement_And_Move_Span(uint8_t * dst_Front_Character
      , uint8_t * character_After_Src_Rear_Character, uintnative_t span_Length){

        // The loop farther down below will simultaneously reverse complement and
        // move two characters so consequently it can only properly handle even
        // span_Lengths. If the span_Lengths are odd, then this if block below will
        // do a single preliminary complement and move to make the remaining
        // span_Lengths an even number that the loop can handle.
        if(span_Length%2){
            *dst_Front_Character++
              =COMPLEMENT_LOOKUP[*--character_After_Src_Rear_Character];
            span_Length--;
        }


        // Reverse complement and move any remaining characters and use the
        // REVERSE_COMPLEMENT_LOOKUP table that was set up during startup to allow
        // us to reverse complement two characters at a time. This is faster than
        // just complementing and moving one character at a time.
        for(; span_Length>=2; span_Length-=2, dst_Front_Character+=2)
            *(uint16_t *)dst_Front_Character=REVERSE_COMPLEMENT_LOOKUP[
              *(uint16_t *)(character_After_Src_Rear_Character-=2)];
    }


    // Look for chunks to assign, reverse complement, and write in order until there
    // are no more sequence_Characters_Left_To_Assign.
    void * process_Chunks(void * unused){

        // Keep assigning, reverse complementing, and writing chunks until one of
        // the inner statements notices that there are no
        // sequence_Characters_Left_To_Assign and returns to the calling
        // function/thread.
        for(;;){

            pthread_mutex_lock(&shared_Variables_Mutex);

                // Check if there are no more sequence_Characters_Left_To_Assign and
                // if so, then exit the function/thread.
                if(!sequence_Characters_Left_To_Assign){
                    pthread_mutex_unlock(&shared_Variables_Mutex);
                    return NULL;
                }

                // full_Line_Front_Span_Length is the number of nucleobases that
                // show up on the last line of the chunk (and also the sequence).
                // If the last line of the chunk is a non-full line, then
                // full_Line_Rear_Span_Length is the number of nucleobases that
                // would be required to be added to make it a full line, otherwise
                // it will be zero if the last line is a full line.
                uintnative_t full_Line_Front_Span_Length
                  =(sequence_Characters_Left_To_Assign-1)%LINE_LENGTH;
                uintnative_t full_Line_Rear_Span_Length
                  =LINE_LENGTH-1-full_Line_Front_Span_Length;

                // Determine the chunk_Size we should use and decrement
                // sequence_Characters_Left_To_Assign by that amount so that the
                // next thread looking for a chunk to work on knows the number of
                // sequence_Characters_Left_To_Assign. Also initialize
                // chunk_Characters_Left_To_Reverse_Complement with the chunk_Size
                // that was determined.
                uintnative_t chunk_Size
                  =sequence_Characters_Left_To_Assign>LINES_PER_CHUNK*LINE_LENGTH
                  ? LINES_PER_CHUNK*LINE_LENGTH
                  : sequence_Characters_Left_To_Assign;
                sequence_Characters_Left_To_Assign-=chunk_Size;
                uintnative_t chunk_Characters_Left_To_Reverse_Complement=chunk_Size;

                // Get a copy of the front_Character_Of_Last_Assigned_Chunk that we
                // can use to keep track of the
                // last_Reverse_Complemented_Chunk_Character.
                uint8_t * last_Reverse_Complemented_Chunk_Character
                  =front_Character_Of_Last_Assigned_Chunk;

                // The current chunk can't be written until the position of the
                // front_Character_Of_Last_Written_Chunk is backed up to match the
                // current position of the front_Character_Of_Last_Assigned_Chunk.
                // Record that position into first_Character_After_Chunk so that we
                // can later determine when it's OK to write this chunk.
                uint8_t * first_Character_After_Chunk
                  =front_Character_Of_Last_Assigned_Chunk;

                // Decrement front_Character_Of_Last_Assigned_Chunk by our
                // chunk_Size so that the next thread looking for a chunk to work on
                // will know to continue working from the front of our chunk.
                front_Character_Of_Last_Assigned_Chunk-=chunk_Size;

            pthread_mutex_unlock(&shared_Variables_Mutex);


            // Instead of doing an in-place reverse complement of the sequence, we
            // instead write the reverse complement of a smaller chunk to
            // chunk_To_Write and then we write chunk_To_Write after we finish
            // reverse complementing the chunk and all prior chunks have been
            // written. By writing/reading to/from chunk_To_Write, which should be
            // mostly cached, we avoid having to do another write/read of the entire
            // sequence to/from main memory.
            uint8_t chunk_To_Write[LINES_PER_CHUNK*LINE_LENGTH];
            uint8_t * chunk_Pos=chunk_To_Write;


            // We now have all information we need to know and can start reverse
            // complementing our chunk.

            // First we check to see if we have an optimal size sequence that
            // entirely consists of full lines (which will be the case when
            // full_Line_Rear_Span_Length is zero). In this case we can just make a
            // single call to reverse_Complement_And_Move_Span() and have it reverse
            // complement the entire chunk. This does require the
            // reverse_Complement_And_Move_Span() function to leave newlines
            // unchanged when they are complemented though.
            if(!full_Line_Rear_Span_Length){
                reverse_Complement_And_Move_Span(chunk_Pos
                  , last_Reverse_Complemented_Chunk_Character
                  , chunk_Characters_Left_To_Reverse_Complement);
                chunk_Characters_Left_To_Reverse_Complement=0;
            }


            // This loop reverse complements and moves full lines and also knows how
            // to skip over newlines as needed and then reinsert them at the
            // appropriate positions. This loop does most of the reverse
            // complementing work.
            for(; chunk_Characters_Left_To_Reverse_Complement>=LINE_LENGTH
              ; chunk_Characters_Left_To_Reverse_Complement-=LINE_LENGTH){

                // Reverse complement and move a full_Line_Front_Span_Length of
                // nucleobases ending in front of the
                // last_Reverse_Complemented_Chunk_Character to chunk_Pos (which
                // will now be pointing at the postion for the first nucleobase of a
                // line). Then chunk_Pos and
                // last_Reverse_Complemented_Chunk_Character are
                // incremented/decremented respectively by
                // full_Line_Front_Span_Length and
                // last_Reverse_Complemented_Chunk_Character is decremented by one
                // more to skip over the newline in the preceding line.
                reverse_Complement_And_Move_Span(chunk_Pos
                  , last_Reverse_Complemented_Chunk_Character
                  , full_Line_Front_Span_Length);
                chunk_Pos+=full_Line_Front_Span_Length;
                last_Reverse_Complemented_Chunk_Character
                  -=full_Line_Front_Span_Length+1;

                // Reverse complement and move a full_Line_Rear_Span_Length of
                // nucleobases ending in front of the
                // last_Reverse_Complemented_Chunk_Character (which will now be
                // pointing at the newline after the last nucleobase of a line) to
                // chunk_Pos. Then chunk_Pos and
                // last_Reverse_Complemented_Chunk_Character are
                // incremented/decremented respectively by
                // full_Line_Rear_Span_Length.
                reverse_Complement_And_Move_Span(chunk_Pos
                  , last_Reverse_Complemented_Chunk_Character
                  , full_Line_Rear_Span_Length);
                chunk_Pos+=full_Line_Rear_Span_Length;
                last_Reverse_Complemented_Chunk_Character
                  -=full_Line_Rear_Span_Length;

                // Finally insert a newline at chunk_Pos and increment it because of
                // the newline.
                *chunk_Pos++='\n';
            }


            // If chunk_Size isn't evenly divisible by LINE_LENGTH, then there will
            // be one last partial line of
            // chunk_Characters_Left_To_Reverse_Complement and the line will contain
            // a full_Line_Front_Span_Length of nucelobases plus a preceding
            // newline. Reverse complement and move that partial line here if
            // necessary.
            if(chunk_Characters_Left_To_Reverse_Complement)
                reverse_Complement_And_Move_Span(chunk_Pos
                  , last_Reverse_Complemented_Chunk_Character
                  , full_Line_Front_Span_Length+1);


            // Before we can write the chunk_To_Write that we just finished reverse
            // complementing, we need to wait for all previous chunks to have been
            // written first which can be checked by seeing if
            // front_Character_Of_Last_Written_Chunk has been backed up enough to
            // equal first_Character_After_Chunk. Once that happens we can then
            // write the chunk_To_Write, back up
            // front_Character_Of_Last_Written_Chunk to reflect that the chunk is
            // now written, and broadcast the write_Finished_Condition in order to
            // wake up another thread that may be waiting for this chunk to have
            // been written.
            pthread_mutex_lock(&shared_Variables_Mutex);

                for(; front_Character_Of_Last_Written_Chunk
                  >first_Character_After_Chunk;)
                    pthread_cond_wait(&write_Finished_Condition
                      , &shared_Variables_Mutex);

                (void)!write(STDOUT_FILENO, chunk_To_Write, chunk_Size);
                front_Character_Of_Last_Written_Chunk-=chunk_Size;
                pthread_cond_broadcast(&write_Finished_Condition);

            pthread_mutex_unlock(&shared_Variables_Mutex);
        }
    }

    void process_Sequence(uint8_t * sequence, uintnative_t sequence_Size){
        // sequence will point at the '>' in the header and sequence_Size is the
        // amount of characters including the '>' in the header and the last newline
        // of the sequence.

        uint8_t * header_Newline=(uint8_t *)memchr(sequence, '\n', sequence_Size);


        // Write the header line including the header_Newline.
        (void)!write(STDOUT_FILENO, sequence, header_Newline-sequence+1);


        // front_Character_Of_Last_Assigned_Chunk and
        // front_Character_Of_Last_Written_Chunk are initially set to point to the
        // last newline of the sequence (if the sequence was one chunk larger and
        // the first chunk was already assigned and written, then this is where the
        // front character of that chunk would have been).
        front_Character_Of_Last_Assigned_Chunk=front_Character_Of_Last_Written_Chunk
          =sequence+sequence_Size-1;

        sequence_Characters_Left_To_Assign
          =front_Character_Of_Last_Assigned_Chunk-header_Newline;


        // Figure out the number_Of_Threads_To_Use based on how many CPU cores are
        // available. Note that using sysconf(_SC_NPROCESSORS_ONLN) will return the
        // number of processors online on the system but not necessarily
        // available to the process (if something like `taskset` is used). Using
        // something like sched_getaffinity() with CPU_COUNT() would be more
        // accurate on systems like Linux but is less portable.
        uintnative_t number_Of_Threads_To_Use
          =(uintnative_t)labs(sysconf(_SC_NPROCESSORS_ONLN));
        pthread_t chunks_Processing_Threads[number_Of_Threads_To_Use];

        // Create number_Of_Threads_To_Use chunks_Processing_Threads and have them
        // all process_Chunks.
        for(uintnative_t i=number_Of_Threads_To_Use; i-->0;)
            pthread_create(&chunks_Processing_Threads[i], NULL, process_Chunks
              , NULL);

        // Wait for all the chunks_Processing_Threads to finish writing the reverse
        // complement of the sequence.
        for(uintnative_t i=number_Of_Threads_To_Use; i-->0;)
            pthread_join(chunks_Processing_Threads[i], NULL);
    }

    void initialize() {
        rewind(stdin);
        // We initialize the REVERSE_COMPLEMENT_LOOKUP table here but only fill in
        // elements for characters that will be in the range of ASCII characters
        // that we can expect to see in inputted data.
        for(uintnative_t i='\n'; i<sizeof(COMPLEMENT_LOOKUP)-1; i++)
            for(uintnative_t j='\n'; j<sizeof(COMPLEMENT_LOOKUP)-1; j++)
                REVERSE_COMPLEMENT_LOOKUP[i<<8 | j]
                  =(uint16_t)COMPLEMENT_LOOKUP[j]<<8
                  | (uint16_t)COMPLEMENT_LOOKUP[i];
    }

    void run_benchmark(int argc, char **argv) {
        // Allocate memory for the initial sequence (assuming there is one).
        uintnative_t sequence_Capacity=READ_SIZE, sequence_Size=0;
        uint8_t * sequence=(uint8_t *)malloc(sequence_Capacity);

        // Read in sequence data until we reach the end of the file or encounter an
        // error.
        for(uintnative_t bytes_Read
          ; (bytes_Read=read(STDIN_FILENO, &sequence[sequence_Size], READ_SIZE));){

            // Search the read in chunk of data for a '>' to see if any sequences
            // are being started.
            for(uint8_t * sequence_Start; (sequence_Start
              =(uint8_t *)memchr(&sequence[sequence_Size], '>', bytes_Read));){

                // Update the sequence_Size to reflect any data before the '>' that
                // was read in.
                uintnative_t number_Of_Preceding_Bytes
                  =sequence_Start-&sequence[sequence_Size];
                sequence_Size+=number_Of_Preceding_Bytes;


                // If there is any data for the current sequence, then process it
                // and update things for processing the next sequence.
                if(sequence_Size){

                    // Process the current sequence.
                    process_Sequence(sequence, sequence_Size);

                    // Copy the read-in '>' and any data following it to the front
                    // of sequence.
                    memmove(sequence, sequence_Start
                      , bytes_Read-number_Of_Preceding_Bytes);

                    // Reset sequence_Size to 0 as we start processing the next
                    // sequence.
                    sequence_Size=0;
                }


                // Update sequence_Size and bytes_Read to reflect the read in '>'
                // and any data that preceded it.
                sequence_Size++;
                bytes_Read-=number_Of_Preceding_Bytes+1;
            }


            // Update sequence_Size to reflect the bytes that were read in.
            sequence_Size+=bytes_Read;

            // If there potentially isn't enough free space for all the data from
            // the next read, then double the capacity of the sequence.
            if(sequence_Size>sequence_Capacity-READ_SIZE)
                sequence=(uint8_t *)realloc(sequence, sequence_Capacity*=2);
        }


        // If there is any data for a last sequence, process it.
        if(sequence_Size)
            process_Sequence(sequence, sequence_Size);

        free(sequence);
        pthread_cond_destroy(&write_Finished_Condition);
        pthread_mutex_destroy(&shared_Variables_Mutex);
    }

    int main(void){
        while (1) {
            initialize();
            if (!start_signal()) break;
            run_benchmark(0, NULL);
            stop_signal();
        }

        pthread_cond_destroy(&write_Finished_Condition);
        pthread_mutex_destroy(&shared_Variables_Mutex);
        return 0;
    }
dependencies:
    - name: gcc15
      version: 15.1.0
options:
    - -pipe
    - -O3
    - -march=native
    - -fomit-frame-pointer
    - -pthread
---
stdin: !!binary |
    Pk9ORSBIb21vIHNhcGllbnMgYWx1CkdHQ0NHR0dDR0NHR1RHR0NUQ0FDR0NDVEdUQUFUQ0NDQUdD
    QUNUVFRHR0dBR0dDQ0dBR0dDR0dHQ0dHQQpUQ0FDQ1RHQUdHVENBR0dBR1RUQ0dBR0FDQ0FHQ0NU
    R0dDQ0FBQ0FUR0dUR0FBQUNDQ0NHVENUQ1RBQ1QKQUFBQUFUQUNBQUFBQVRUQUdDQ0dHR0NHVEdH
    VEdHQ0dDR0NHQ0NUR1RBQVRDQ0NBR0NUQUNUQ0dHR0FHCkdDVEdBR0dDQUdHQUdBQVRDR0NUVEdB
    QUNDQ0dHR0FHR0NHR0FHR1RUR0NBR1RHQUdDQ0dBR0FUQ0dDRwpDQ0FDVEdDQUNUQ0NBR0NDVEdH
    R0NHQUNBR0FHQ0dBR0FDVENDR1RDVENBQUFBQUdHQ0NHR0dDR0NHR1QKR0dDVENBQ0dDQ1RHVEFB
    VENDQ0FHQ0FDVFRUR0dHQUdHQ0NHQUdHQ0dHR0NHR0FUQ0FDQ1RHQUdHVENBCkdHQUdUVENHQUdB
    Q0NBR0NDVEdHQ0NBQUNBVEdHVEdBQUFDQ0NDR1RDVENUQUNUQUFBQUFUQUNBQUFBQQpUVEFHQ0NH
    R0dDR1RHR1RHR0NHQ0dDR0NDVEdUQUFUQ0NDQUdDVEFDVENHR0dBR0dDVEdBR0dDQUdHQUcKQUFU
    Q0dDVFRHQUFDQ0NHR0dBR0dDR0dBR0dUVEdDQUdUR0FHQ0NHQUdBVENHQ0dDQ0FDVEdDQUNUQ0NB
    CkdDQ1RHR0dDR0FDQUdBR0NHQUdBQ1RDQ0dUQ1RDQUFBQUFHR0NDR0dHQ0dDR0dUR0dDVENBQ0dD
    Q1RHVApBQVRDQ0NBR0NBQ1RUVEdHR0FHR0NDR0FHR0NHR0dDR0dBVENBQ0NUR0FHR1RDQUdHQUdU
    VENHQUdBQ0MKQUdDQ1RHR0NDQUFDQVRHR1RHQUFBQ0NDQ0dUQ1RDVEFDVEFBQUFBVEFDQUFBQUFU
    VEFHQ0NHR0dDR1RHCkdUR0dDR0NHQ0dDQ1RHVEFBVENDQ0FHQ1RBQ1RDR0dHQUdHQ1RHQUdHQ0FH
    R0FHQUFUQ0dDVFRHQUFDQwpDR0dHQUdHQ0dHQUdHVFRHQ0FHVEdBR0NDR0FHQVRDR0NHQ0NBQ1RH
    Q0FDVENDQUdDQ1RHR0dDR0FDQUcKQUdDR0FHQUNUQ0NHVENUQ0FBQUFBR0dDQ0dHR0NHQ0dHVEdH
    Q1RDQUNHQ0NUR1RBQVRDQ0NBR0NBQ1RUClRHR0dBR0dDQ0dBR0dDR0dHQ0dHQVRDQUNDVEdBR0dU
    Q0FHR0FHVFRDR0FHQUNDQUdDQ1RHR0NDQUFDQQpUR0dUR0FBQUNDQ0NHVENUQ1RBQ1RBQUFBQVRB
    Q0FBQUFBVFRBR0NDR0dHQ0dUR0dUR0dDR0NHQ0dDQ1QKR1RBQVRDQ0NBR0NUQUNUQ0dHR0FHR0NU
    R0FHR0NBR0dBR0FBVENHQ1RUR0FBQ0NDR0dHQUdHQ0dHQUdHClRUR0NBR1RHQUdDQ0dBR0FUQ0dD
    R0NDQUNUR0NBQ1RDQ0FHQ0NUR0dHQ0dBQ0FHQUdDR0FHQUNUQ0NHVApDVENBQUFBQUdHQ0NHR0dD
    R0NHR1RHR0NUQ0FDR0NDVEdUQUFUQ0NDQUdDQUNUVFRHR0dBR0dDQ0dBR0cKQ0dHR0NHR0FUQ0FD
    Q1RHQUdHVENBR0dBR1RUQ0dBR0FDQ0FHQ0NUR0dDQ0FBQ0FUR0dUR0FBQUNDQ0NHClRDVENUQUNU
    QUFBQUFUQUNBQUFBQVRUQUdDQ0dHR0NHVEdHVEdHQ0dDR0NHQ0NUR1RBQVRDQ0NBR0NUQQpDVENH
    R0dBR0dDVEdBR0dDQUdHQUdBQVRDR0NUVEdBQUNDQ0dHR0FHR0NHR0FHR1RUR0NBR1RHQUdDQ0cK
    QUdBVENHQ0dDQ0FDVEdDQUNUQ0NBR0NDVEdHR0NHQUNBR0FHQ0dBR0FDVENDR1RDVENBQUFBQUdH
    Q0NHCkdHQ0dDR0dUR0dDVENBQ0dDQ1RHVEFBVENDQ0FHQ0FDVFRUR0dHQUdHQ0NHQUdHQ0dHR0NH
    R0FUQ0FDQwpUR0FHR1RDQUdHQUdUVENHQUdBQ0NBR0NDVEdHQ0NBQUNBVEdHVEdBQUFDQ0NDR1RD
    VENUQUNUQUFBQUEKVEFDQUFBQUFUVEFHQ0NHR0dDR1RHR1RHR0NHQ0dDR0NDVEdUQUFUQ0NDQUdD
    VEFDVENHR0dBR0dDVEdBCkdHQ0FHR0FHQUFUQ0dDVFRHQUFDQ0NHR0dBR0dDR0dBR0dUVEdDQUdU
    R0FHQ0NHQUdBVENHQ0dDQ0FDVApHQ0FDVENDQUdDQ1RHR0dDR0FDQUdBR0NHQUdBQ1RDQ0dUQ1RD
    QUFBQUFHR0NDR0dHQ0dDR0dUR0dDVEMKQUNHQ0NUR1RBQVRDQ0NBR0NBQ1RUVEdHR0FHR0NDR0FH
    R0NHR0dDR0dBVENBQ0NUR0FHR1RDQUdHQUdUClRDR0FHQUNDQUdDQ1RHR0NDQUFDQVRHR1RHQUFB
    Q0NDQ0dUQ1RDVEFDVEFBQUFBVEFDQUFBQUFUVEFHQwpDR0dHQ0dUR0dUR0dDR0NHQ0dDQ1RHVEFB
    VENDQ0FHQ1RBQ1RDR0dHQUdHQ1RHQUdHQ0FHR0FHQUFUQ0cKQ1RUR0FBQ0NDR0dHQUdHQ0dHQUdH
    VFRHQ0FHVEdBR0NDR0FHQVRDR0NHQ0NBQ1RHQ0FDVENDQUdDQ1RHCkdHQ0dBQ0FHQUdDR0FHQUNU
    Q0NHCj5UV08gSVVCIGFtYmlndWl0eSBjb2RlcwpjdHRCdGF0Y2F0YXRnY3RhS2dnTmNhdGFhYVNh
    dGd0YWFhRGNEUnRCZ2dEdGN0dHRhdGFhdHRjQmd0Y2cKdGFjdER0RGFnY2N0YXR0dFNWSHRIdHRL
    dGd0SE1hU2F0dGdXYUhLSHR0dHRhZ2FjYXRXYXRndFJnYWFhCk50YWN0TWNTTXRZdGNNZ1J0YWN0
    dGN0V0JhY2dhYWF0YXRhZ1NjRHR0dGdhYWdhY2FjYXRhZ3RWZ1lndApjYXR0SFd0TU1XY1N0Z3R0
    YWdnS3RTZ2FZYWFjY1dTdGNnQnR0Z2NnYU10dEJZYXRjV3RnYWNhWWNhZ2EKZ3RhQkR0UmFjdHR0
    dGNXYXRNdHREQmNhdFd0YXRjdHRhY3RhQmdhWXRjdHRndHR0dHR0dHRZYWFTY1lhCkhndGd0dE50
    U2F0Y010Y1ZhYWFTdGNjUmNjdERhYXRhYXRhU3RjWXRSRFNhTXREdHRndHRTYWd0UlJjYQp0dHRI
    YXRTdHRNdFdndGNndGF0U1NhZ2FjdFlhYWF0dGNhTXRXYXR0dGFTZ1l0dGFSZ0thUnRjY2FjdHQK
    dGF0dFJnZ2FNY0RhV2FXYWd0dHR0Z2FjYXRndHRjdGFjYWFhUmFhdGF0YWF0YWFNdHRjZ0RhY2dh
    U1N0CmFjYVN0WVJjdFZhTk10TWd0YWdnY0thdGN0dHR0YXR0YWFhYWFnVldhSEtZYWd0dHR0dGF0
    dHRhYWNjdAp0YWNndFZ0Y1ZhYXR0Vk1CY3R0YU10dHRhU3RnYWN0dGFnYXR0V1dhY1Z0Z1dZYWdX
    VlJjdERhdHRCWXQKZ3R0dGFhZ2FhZ2F0dGF0dGdhY1ZhdE1hYWNhdHRWY3RndEJTZ2FWdGdXV2dn
    YUtIYWF0S1djQlNjU1dhCmFjY1JWYWNhY2FhYWN0YWNjU2NhdHRSYXRhdEtWdGFjdGF0YXR0dEh0
    dGFhZ3R0dFNLdFJ0YWNhYWFndApSRHR0Y2FhYWFXZ2NhY2F0V2FEZ3RES2FjZ2FhY2FhdHRhY2FS
    TldhYXRIdHR0U3RndHRhdHRhYU10Z3QKdGdEY2d0TWdjYXRCdGdjdHRjZ2NnYURXZ2FnY3RnY2dh
    Z2dnZ1Z0YWFTY05hdHR0YWN0dGFhdGdhY2FnCmNjY2NjYWNhdFlTY2FNZ3RhZ2d0WWFOZ3R0Y3Rn
    YU1hYWNOYU1SYWFjYWFhY2FLY3RhY2F0YWdZV2N0Zwp0dFdhYWF0YWFhYXRhUmF0dGFnSGFjYWNh
    YWdjZ0thdGFjQnR0UnR0YWFndGF0dHRjY2dhdGN0SFNhYXQKYWN0Y050dE1hYWd0YXR0TXRnUnRn
    YU1nY2F0YWF0SGNNdGFCU2FSYXR0YWd0dGdhdEh0TXR0YWFLYWdnCll0YWFCYXRhU2FWYXRhY3RX
    dGF0YVZXZ0tndHRhYWFhY2FndGdjZ1JhdGF0YWNhdFZ0SFJ0VllhdGFTYQpLdFdhU3RWY05LSEt0
    dGFjdGF0Y2NjdGNhdGdXSGF0V2FSY3R0YWN0YWdnYXRjdGF0YUR0REhCdHRhdGEKYWFhSGd0YWNW
    dGFnYVl0dFlhS2NjdGF0dGN0dGN0dGFhdGFORGFhZ2dhYWFEWWdjZ2djdGFhV1NjdEJhCmFOdGdj
    dGdnTUJhS2N0YU1WS2FnQmFhY3RhV2FEYU1hY2NZVnROdGFIdFZXdEtnUnRjYWFOdFlhTmFjZwpn
    dHR0TmF0dGdWdHR0Y3RndEJhV2d0YWF0dGNhYWd0Y2FWV3RhY3ROZ2dhdHRjdHR0YVl0YWFhZ2Nj
    Z2MKdGN0dGFnSFZnZ2FZdGd0TmNEYVZhZ2N0Y3RjdEtnYWNndGF0YWdZY2N0UllIRHRnQmF0dERh
    YURnY2NLCnRjSGFhU3R0dE1jY3RhZ3RhdHRnY1JnV0JhVmF0SGFhYWF0YVl0Z3R0dGFnTURNUnRh
    YXRhYWdnYXRNdAp0dGN0V2d0TnRndGdhYWFhTWFhdGF0UnR0dE10RGdISHRndGNhdHR0dGNXYXR0
    UlNIY1ZhZ2FhZ3RhY2cKZ2d0YUtWYXR0S1lhZ2FjdE5hYXRndHR0Z0tNTWdZTnRjY2NnU0t0dGN0
    YVN0YXRhdE5WYXRhWUhndE5hCkJLUmdOYWNhYWN0Z2F0dHRjY3R0dGFOY2dhdHR0Y3RjdGF0YVNj
    YUh0YXRhUmFndGNSVnR0YWNEU0R0dAphUnRTYXRhY0hndFNLYWNZYWd0dE1IdFdhdGFnZ2F0Z2Fj
    dE50YXRTYU5jdGF0YVZ0dHRSTkt0Z1JhY2MKdHR0WXRhdGd0dGFjdHR0dHRjY3R0dGFhYWNhdGFj
    YUhhY3RNYWNhY2dndFdhdGFNdEJWYWNSYVNhYXRjCmNndGFCVnR0Y2NhZ2NjQmN0dGFSS3RndGdj
    Y3R0dHR0UnRndGNhZ2NSdHRLdGFhYWNLdGFhYXRjdGNhYwphYXR0Z2NhTnRTQmFhY2NnZ2d0dGF0
    dGFhQmNLYXREYWd0dGFjdGN0dGNhdHRWdHR0SGFhZ2djdEtLZ2EKdGFjYXRjQmdnU2NhZ3RWY2Fj
    YXR0dHRnYUhhRFNnSGF0Uk1hSFdnZ3RhdGF0UmdjY0R0dGNndGF0Y2dhCmFhY2FIdGFhZ3R0YVJh
    dGdhVmFjdHRhZ2F0dFZLdGFhWXR0YWFhdGNhTmF0Y2NSdHRSUmFNU2NOYWFhRApndHRWSFdndGNI
    YWFIZ2FjVmFXdGd0dFNjYWN0YWFnU2d0dGF0Y3R0YWdnZ0R0YWNjYWdXYXR0V3RSdGcKdHRIV0hh
    Y2dhdHRCdGdWY2FZYXRjZ2d0dGdhZ0tjV3RLS2NhVnRnYVlnV2N0Z1lnZ1ZjdGd0SGdhTmNWCnRh
    QnRXYWFZYXRjRFJhYVJ0U2N0Z2FIYVlSdHRhZ2F0TWF0Z2NhdHR0TmF0dGFEdHRhYXR0Z3R0Y3Rh
    YQpjY2N0Y2NjY3RhZ2FXQnR0dEh0QmNjdHRhZ2FWYWF0TWNCSGFnYVZjV2NhZ0JWdHRjQnRhWU1j
    Y2FnYXQKZ2FhYWFIY3RjdGFhY2d0dGFnTldSdGNnZ2F0dE5hdGNSYU5IdHRjYWd0S3R0dHRnV2F0
    V3R0Y1NhTmdnCmdhV3RhY3RLS01hYWNhdEthdGFjTmF0dGdjdFd0YXRjdGFWZ2FnY3RhdGd0UmFI
    dFljV2N0dGFnY2NhYQp0WXR0V3R0YVdTU3R0YUhjYWFhYWFnVmFjVmd0YVZhUk1nYXR0YVZjRGFj
    dHR0Y0hIZ2dIUnRnTmNjdHQKdFlhdGNhdEtnY3RjY3RjdGF0VmNhYWFhS2FhYWFndGF0YXRjdGdN
    dFd0YWFhYWNhU3R0dE10Y2dhY3R0CnRhU2F0Y2dEYXRhYWFjdGFhYWNhYWd0YWFWY3RhZ2dhU2Nj
    YWF0TVZ0YWFTS05WYXR0dHRnSGNjYXRjYQpjQlZjdGdjYVZhdFZ0dFJ0YWN0Z3RWY2FhdHRIZ3Rh
    YWF0dGFhYXR0dHRZdGF0YXR0YWFSU2dZdGdCYWcKYUhTQkRndGFnY2FjUkh0WWNCZ3RjYWN0dGFj
    YWN0YVljZ2N0V3RhdHRnU0h0U2F0Y2F0YWFhdGF0YUh0CmNndFlhYU1OZ0JhYXR0dGFSZ2FNYWF0
    YXR0dEJ0dHRhYWFISEthYXRjdGdhdFdhdFlhYWN0dE1jdGN0dAp0dFZjdGFnY3REYWFhZ3RhVmFL
    YUtSdGFhY0JndGF0Y2NhYWNjYWN0SEhhYWdhYWdhYWdnYU5hYWF0QlcKYXR0Y2NnU3RhTVNhTWF0
    QnR0Z2NhdGdSU2FjZ3R0VlZ0YWFETXRjU2dWYXRXY2FTYXRjdHR0dFZhdGFnCnR0YWN0dHRhY2dh
    dGNhY2NOdGFEVmdTUmNnVmNndGdhYWNnYU50YU5hdGF0YWd0SHRNZ3RIY010YWdhYQphdHRCZ3Rh
    dGFSYWFhYWNhWUtndFJjY1l0YXRnYWFndGFhdGFLZ3RhYU10dGdhYVJWYXRnY2FnYUtTdGMKdEhO
    YWFhdGN0QkJ0Y3R0YVlhQldIZ3RWdGdhY2FnY2FSY2F0YVdjdGNhQmNZYWNZZ2F0RGd0REhjY3Rh
    Cj5USFJFRSBIb21vIHNhcGllbnMgZnJlcXVlbmN5CmFhY2FjdHRjYWNjYWdndGF0Y2d0Z2FhZ2dj
    dGNhYWdhdHRhY2NjYWdhZ2FhY2N0dHRnY2FhdGF0YWFnYQphdGF0Z3RhdGdjYWdjYXR0YWNjY3Rh
    YWd0YWF0dGF0YXR0Y3R0dHR0Y3RnYWN0Y2FhYWd0Z2FjYWFnY2MKY3RhZ3RndGF0YXR0YWFhdGNn
    Z3RhdGF0dHRnZ2dhYWF0dGNjdGNhYWFjdGF0Y2N0YWF0Y2FnZ3RhZ2NjCmF0Z2FhYWd0Z2F0Y2Fh
    YWFhYWd0dGNndGFjdHRhdGFjY2F0YWNhdGdhYXR0Y3RnZ2NjYWFndGFhYWFhYQp0YWdhdHRnY2dj
    YWFhYXR0Y2d0YWNjdHRhYWd0Y3RjdGNnY2NhYWdhdGF0dGFnZ2F0Y2N0YXR0YWN0Y2EKdGF0Y2d0
    Z3R0dHR0Y3R0dGF0dGdjY2djY2F0Y2NjY2dnYWd0YXRjdGNhY2NjYXRjY3R0Y3RjdHRhYWFnCmdj
    Y3RhYXRhdHRhY2N0YXRnY2FhYXRhYWFjYXRhdGF0dGd0dGdhYWFhdHRnYWdhYWNjdGdhdGNndGdh
    dAp0Y3R0YXRndGd0YWNjYXRhdGd0YXRhZ3RhYXRjYWNnY2dhY3RhdGF0YWd0Z2N0dHRhZ3RhdGNn
    Y2NjZ3QKZ2dndGdhZ3RnYWF0YXR0Y3RnZ2djdGFnY2d0Z2FnYXRhZ3R0dGN0dGd0Y2N0YWF0YXR0
    dHR0Y2FnYXRjCmdhYXRhZ2N0dGN0YXR0dHR0Z3RndHR0YXR0Z2FjYXRhdGd0Y2dhYWFjdGNjdHRh
    Y3RjYWd0Z2FhYWd0YwphdGdhY2NhZ2F0Y2NhY2dhYWNhYXRjdHRjZ2dhYXRjYWd0Y3RjZ3R0dHRh
    Y2dnY2dnYWF0Y3R0Z2FndGMKdGFhY3R0YXRhdGNjY2d0Y2djdHRhY3R0dGN0YWFjYWNjY2N0dGF0
    Z3RhdHR0dHRhYWFhdHRhY2d0dHRhCnR0Y2dhYWNndGFjdHRnZ2NnZ2FhZ2NndHRhdHR0dHR0Z2Fh
    Z3RhYWd0dGFjYXR0Z2dnY2FnYWN0Y3R0ZwphY2F0dHR0Y2dhdGFjZ2FjdHR0Y3R0dGNhdGNjYXRj
    YWNhZ2dhY3RjZ3R0Y2d0YXR0Z2F0YXRjYWdhYWcKY3RjZ3RnYXRnYXR0YWd0dGd0Y3R0Y3R0dGFj
    Y2FhdGFjdHR0Z2FnZ2NjdGF0dGN0Z2NnYWFhdHR0dHRnCnR0Z2NjY3RnY2dhYWN0dGNhY2F0YWNj
    YWFnZ2FhY2FjY3RjZ2NhYWNhdGdjY3R0Y2F0YXRjY2F0Y2d0dApjYXR0Z3RhYXR0Y3R0YWNhY2Fh
    dGdhYXRjY3RhYWd0YWF0dGFjYXRjY2N0Z2NndGFhYWFnYXRnZ3RhZ2cKZ2djYWN0Z2FnZ2F0YXRh
    dHRhY2NhYWdjYXR0dGFndHRhdGdhZ3RhYXRjYWdjYWF0Z3R0dGN0dGd0YXR0CmFhZ3R0Y3RjdGFh
    YWF0YWd0dGFjYXRjZ3RhYXRndHRhdGN0Y2dnZ3R0Y2NnY2dhYXRhYWFjZ2FnYXRhZwphdHRjYXR0
    YXRhdGF0Z2djY2N0YWFnY2FhYWFhY2N0Y2N0Y2d0YXR0Y3RndHRnZ3RhYXR0YWdhYXRjYWMKYWNh
    YXRhY2dnZ3R0Z2FnYXRhdHRhYXR0YXR0dGd0YWd0YWNnYWFnYWdhdGF0YWFhYWFnYXRnYWFjYWF0
    CnRhY3RjYWFndGNhYWdhdGd0YXRhY2dnZ2F0dHRhdGFhdGFhYWFhdGNnZ2d0YWdhZ2F0Y3RnY3R0
    dGdjYQphdHRjYWdhY2d0Z2NjYWN0YWFhdGNndGFhdGF0Z3RjZ2NndHRhY2F0Y2FnYWFhZ2dndGFh
    Y3RhdHRhdHQKYWF0dGFhdGFhYWdnZ2N0dGFhdGNhY3RhY2F0YXR0YWdhdGN0dGF0Y2NnYXRhZ3Rj
    dHRhdGN0YXR0Y2d0CnRndGF0dHR0dGFhZ2NnZ3R0Y3RhYXR0Y2FndGNhdHRhdGF0Y2FndGdjdGNj
    Z2FndHRjdHR0YXR0YXR0Zwp0dHR0YWFnZ2F0Z2FjYWFhYXRnY2N0Y3R0Z3R0YXRhYWNnY3RnZ2dh
    Z2FhZ2NhZ2FjdGFhZ2FndGNnZ2EKZ2NhZ3R0Z2d0YWdhYXRnYWdnY3RnY2FhYWFnYWNnZ3RjdGNn
    YWNnYWF0Z2dhY2FnYWN0dHRhY3RhYWFjCmNhYXRnYWFhZ2FjYWdhYWd0YWdhZ2NhYWFndGN0Z2Fh
    Z3RnZ3RhdGNhZ2N0dGFhdHRhdGdhY2FhY2NjdAp0YWF0YWN0dGNjY3R0dGNnY2NnYWF0YWN0Z2dj
    Z3RnZ2FhYWdndHR0dGFhYWFndGNnYWFndGFndHRhZ2EKZ2djYXRjdGN0Y2djdGNhdGFhYXRhZ2d0
    YWdhY3RhY3RjZ2NhYXRjY2FhdGd0Z2FjdGF0Z3RhYXRhY3RnCmdnYWFjYXRjYWd0Y2NnY2dhdGdj
    YWdjZ3RndHR0YXRjYWFjY2d0Y2NjY2FjdGNnY2N0Z2dnZ2FnYWNhdApnYWdhY2NhY2NjY2NndGdn
    Z2dhdHRhdHRhZ3RjY2djYWd0YWF0Y2dhY3RjdHRnYWNhYXRjY3R0dHRjZ2EKdHRhdGd0Y2F0YWdj
    YWF0dHRhY2dhY2FndHRjYWdjZ2FhZ3RnYWN0YWN0Y2dnY2dhYWF0Z2d0YXR0YWN0CmFhYWdjYXR0
    Y2dhYWNjY2FjYXRnYWF0Z3RnYXR0Y3R0Z2djYWF0dHRjdGFhdGNjYWN0YWFhZ2N0dHR0YwpjZ3R0
    Z2FhdGN0Z2d0dGd0YWdhdGF0dHRhdGF0YWFndHRjYWN0YWF0dGFhZ2F0Y2FjZ2d0YWd0YXRhdHQK
    Z2F0YWd0Z2F0Z3RjdHR0Z2NhYWdhZ2d0dGdnY2NnYWdnYWF0dHRhY2dnYXR0Y3RjdGF0dGdhdGFj
    YWF0CnR0Z3RjdGdnY3R0YXRhYWN0Y3R0YWFnZ2N0Z2FhY2NhZ2djZ3R0dHR0YWdhY2dhY3R0Z2F0
    Y2FnY3RndAp0YWdhYXRnZ3R0dGdnYWN0Y2NjdGN0dHRjYXRndGNhZ3RhYWNhdHR0Y2FnY2NndHRh
    dHRndHRhY2dhdGEKdGdjdHRnYWFjYWF0YXR0Z2F0Y3RhY2NhY2FjYWNjY2F0YWd0YXRhdHR0dGF0
    YWdndGNhdGdjdGd0dGFjCmN0YWNnYWdjYXRnZ3RhdHRjY2FjdHRjY2NhdHRjYWF0Z2FndGF0dGNh
    YWNhdGNhY3RhZ2NjdGNhZ2FnYQp0Z2F0Z2FjY2NhY2N0Y3RhYXRhYWNndGNhY2d0dGdjZ2djY2F0
    Z3RnYWFhY2N0Z2FhY3R0Z2FndGFnYWMKZ2F0YXRjYWFnY2djdHR0YWFhdHRnY2F0YXRhYWNhdHR0
    Z2FnZ2d0YWFhZ2N0YWFnY2dnYXRnY3R0dGF0CmF0YWF0Y2FhdGFjdGNhYXRhYXRhYWdhdHR0Z2F0
    dGdjYXR0dHRhZ2FndHRhdGdhY2FjZ2FjYXRhZ3R0YwphY3RhYWNnYWd0dGFjdGF0dGNjY2FnYXRj
    dGFnYWN0Z2FhZ3RhY3RnYXRjZ2FnYWNnYXRjY3R0YWNndGMKZ2F0Z2F0Y2d0dGFndHRhdGNnYWN0
    dGFnZ3RjZ2dndGN0Y3RhZ2NnZ3RhdHRnZ3RhY3R0YWFjY2dnYWNhCmN0YXRhY3RhYXRhYWNjY2F0
    Z2F0Y2FhYWdjYXRhYWNhZ2FhdGFjYWdhY2dhdGFhdHR0Y2djY2FhY2F0YQp0YXRndGFjYWdhY2Nj
    Y2FhZ2NhdGdhZ2FhZ2N0Y2F0dGdhYWFnY3RhdGNhdHRnYWFndGNjY2djdGNhY2EKYXRndGd0Y3R0
    dHRjY2FnYWNnZ3R0dGFhY3RnZ3R0Y2NjZ2dnYWd0Y2N0Z2dhZ3R0dGNnYWN0dGFjYXRhCmFhdGdn
    YWFhY2FhdGd0YXR0dHRnY3RhYXR0dGF0Y3RhdGFnY2d0Y2F0dHRnZ2FjY2FhdGFjYWdhYXRhdAp0
    YXRndHRnY2N0YWd0YWF0Y2NhY3RhdGFhY2NjZ2NhYWd0Z2N0Z2F0YWdhYWFhdHR0dHRhZ2FjZ2F0
    dHQKYXRhYWF0Z2NjY2NhYWd0YXRjY2N0Y2NjZ3RnYWF0Y2N0Y2NndHRhdGFjdGFhdHRhZ3RhdHRj
    Z3R0Y2F0CmFjZ3RhdGFjY2djZ2NhdGF0YXRnYWFjYXR0dGdnY2dhdGFhZ2djZ2NndGdhYXR0Z3R0
    YWNndGdhY2FnYQpnYXRhZ2NhZ3R0dGN0dGd0Z2F0YXRnZ3R0YWFjYWdhY2d0YWNhdGdhYWdnZ2Fh
    YWN0dHRhdGF0Y3RhdGEKZ3RnYXRnY3R0Y2NndGFnYWFhdGFjY2djY2FjdGdndGN0Z2NjYWF0Z2F0
    Z2FhZ3RhdGd0YWdjdHR0YWdnCnR0dGd0YWN0YXRnYWdnY3R0dGNndHR0Z3R0dGdjYWdhZ3RhdGFh
    Y2FndHRnY2dhZ3RnYWFhYWFjY2dhYwpnYWF0dHRhdGFjdGFhdGFjZ2N0dHRjYWN0YXR0Z2djdGFj
    YWFhYXRhZ2dnYWFnYWd0dHRjYWF0Y2F0Z2EKZ2FnZ2dhZ3RhdGF0Z2dhdGdjdHR0Z3RhZ2N0YWFh
    Z2d0YWdhYWNndGF0Z3RhdGF0Z2N0Z2NjZ3R0Y2F0CnRjdHRnYWFhZ2F0YWNhdGFhZ2NnYXRhYWd0
    dGFjZ2FjYWF0dGF0YWFnY2FhY2F0Y2NjdGFjY3R0Y2d0YQphY2dhdHR0Y2FjdGd0dGFjdGdjZ2N0
    dGdhYWF0YWNhY3RhdGdnZ2djdGF0dGdnY2dnYWdhZ2FhZ2NhZ2EKdGNnY2djY2dhZ2NhdGF0YWNn
    YWdhY2N0YXRhYXRndHRnYXRnYXRhZ2FnYWFnZ2NndGN0Z2FhdHRnYXRhCmNhdGNnYWFndGFjYWN0
    dHRjdHR0Y2d0YWd0YXRjdGN0Y2d0Y2N0Y3R0dGN0YXRjdGNjZ2dhY2FjYWFnYQphdHRhYWd0dGF0
    YXRhdGF0YWdhZ3RjdHRhY2NhYXRjYXRndHRnYWF0Y2N0Z2F0dGN0Y2FnYWd0dGN0dHQKZ2djZ2dn
    Y2N0dGd0Z2F0Z2FjdGdhZ2FhYWNhYXRnY2FhdGF0dGdjdGNjYWFhdHR0Y2N0YWFnY2FhYXR0CmN0
    Y2dndHRhdGd0dGF0Z3R0YXRjYWdjYWFhZ2NndHRhY2d0dGF0Z3R0YXR0dGFhYXRjdGdnYWF0Z2Fj
    ZwpnYWdjZ2FhZ3R0Y3R0YXRndGNnZ3RndGdnZ2FhdGFhdHRjdHR0dGdhYWdhY2FnY2FjdGNjdHRh
    YWF0YWEKdGF0Y2djdGNjZ3RndHR0Z3RhdHR0YXRjZ2FhdGdnZ3RjdGd0YWFjY3R0Z2NhY2FhZ2Nh
    YWF0Y2dndGdnCnRndGF0YXRhdGNnZ2F0YWFjYWF0dGFhdGFjZ2F0Z3R0Y2F0YWd0Z2FjYWd0YXRh
    Y3RnYXRjZ2FndGNjdApjdGFhYWd0Y2FhdHRhY2N0Y2FjdHRhYWNhYXRjdGNhdHRnYXRndHRndGd0
    Y2F0dGNjY2dndGF0Y2djY2MKZ3RhZ3RhdGd0Z2N0Y3RnYXR0Z2FjY2dhZ3RndGdhYWNjYWFnZ2Fh
    Y2F0Y3RhY3RhYXRnY2N0dHRndHRhCmdndGFhZ2F0Y3RjdGN0Z2FhdHRjY3R0Y2d0Z2NjYWFjdHRh
    YWFhY2F0dGF0Y2FhYWF0dHRjdHRjdGFjdAp0Z2dhdHRhYWN0YWN0dHR0YWNnYWdjYXRnZ2NhYWF0
    dGNjY2N0Z3RnZ2FhZ2FjZ2d0dGNhdHRhdHRhdGMKZ2dhYWFjY3R0YXRhZ2FhYXR0Z2NndGd0dGdh
    Y3RnYWFhdHRhZ2F0dHR0dGF0dGd0YWFnYWd0dGdjYXRjCnR0dGdjZ2F0dGNjdGN0Z2d0Y3RhZ2N0
    dGNjYWF0Z2FhY2FndGNjdGNjY3R0Y3RhdHRjZ2FjYXRjZ2dndApjY3R0Y2d0YWNhdGd0Y3R0dGdj
    Z2F0Z3RhYXRhYXR0YWdndHRjZ2dhZ3RndGdnY2N0dGFhdGdnZ3RnY2EKYWN0YWdnYWF0YWNhYWNn
    Y2FhYXR0dGdjdGdhY2F0Z2F0YWdjYWFhdGNnZ3RhdGdjY2dnY2FjY2FhYWFjCmd0Z2N0Y2N0dGdj
    dHRhZ2N0dGd0Z2FhdGdhZ2FjdGNhZ3RhZ3R0YWFhdGFhYXRjY2F0YXRjdGdjYWF0YwpnYXR0Y2Nh
    Y2FnZ3RhdHRndGNjYWN0YXRjdHR0Z2FhY3RhY3RjdGFhZ2FnYXRhY2FhZ2N0dGFnY3RnYWcKYWNj
    Z2FnZ3RndGF0YXRnYWN0YWNnY3RnYXRhdGN0Z3RhYWdndGFjY2FhdGdjYWdnY2FhYWd0YXRnY2dh
    CmdhYWdjdGFhdGFjY2dnY3RndHR0Y2NhZ2N0dHRhdGFhZ2F0dGFhYWF0dHRnZ2N0Z3RjY3RnZ2Nn
    Z2NjdApjYWdhYXR0Z3R0Y3RhdGNndGFhdGNhZ3R0Z2d0dGNhdHRhYXR0YWdjdGFhZ3RhY2dhZ2d0
    YWNhYWN0dGEKdGN0Z3RjY2NhZ2FhY2FnY3RjY2FjYWFndHR0dHR0dGFjYWdjY2dhYWFjY2NjdGd0
    Z3RnYWF0Y3R0YWF0CmF0Y2NhYWdjZ2NndHRhdGN0Z2F0dGFnYWd0dHRhY2FhY3RjYWd0YXR0dHRh
    dGNhZ3RhY2d0dHR0Z3R0dApjY2FhY2F0dGFjY2NnZ3RhdGdhY2FhYWF0Z2FjZ2NjYWNndGd0Y2dh
    YXRhYXRnZ3RjdGdhY2NhYXRndGEKZ2dhYWd0Z2FhYWFnYXRhYWF0YXQK
expected_stdout: !!binary |
    Pk9ORSBIb21vIHNhcGllbnMgYWx1CkNHR0FHVENUQ0dDVENUR1RDR0NDQ0FHR0NUR0dBR1RHQ0FH
    VEdHQ0dDR0FUQ1RDR0dDVENBQ1RHQ0FBQwpDVENDR0NDVENDQ0dHR1RUQ0FBR0NHQVRUQ1RDQ1RH
    Q0NUQ0FHQ0NUQ0NDR0FHVEFHQ1RHR0dBVFRBQ0EKR0dDR0NHQ0dDQ0FDQ0FDR0NDQ0dHQ1RBQVRU
    VFRUR1RBVFRUVFRBR1RBR0FHQUNHR0dHVFRUQ0FDQ0FUCkdUVEdHQ0NBR0dDVEdHVENUQ0dBQUNU
    Q0NUR0FDQ1RDQUdHVEdBVENDR0NDQ0dDQ1RDR0dDQ1RDQ0NBQQpBR1RHQ1RHR0dBVFRBQ0FHR0NH
    VEdBR0NDQUNDR0NHQ0NDR0dDQ1RUVFRUR0FHQUNHR0FHVENUQ0dDVEMKVEdUQ0dDQ0NBR0dDVEdH
    QUdUR0NBR1RHR0NHQ0dBVENUQ0dHQ1RDQUNUR0NBQUNDVENDR0NDVENDQ0dHCkdUVENBQUdDR0FU
    VENUQ0NUR0NDVENBR0NDVENDQ0dBR1RBR0NUR0dHQVRUQUNBR0dDR0NHQ0dDQ0FDQwpBQ0dDQ0NH
    R0NUQUFUVFRUVEdUQVRUVFRUQUdUQUdBR0FDR0dHR1RUVENBQ0NBVEdUVEdHQ0NBR0dDVEcKR1RD
    VENHQUFDVENDVEdBQ0NUQ0FHR1RHQVRDQ0dDQ0NHQ0NUQ0dHQ0NUQ0NDQUFBR1RHQ1RHR0dBVFRB
    CkNBR0dDR1RHQUdDQ0FDQ0dDR0NDQ0dHQ0NUVFRUVEdBR0FDR0dBR1RDVENHQ1RDVEdUQ0dDQ0NB
    R0dDVApHR0FHVEdDQUdUR0dDR0NHQVRDVENHR0NUQ0FDVEdDQUFDQ1RDQ0dDQ1RDQ0NHR0dUVENB
    QUdDR0FUVEMKVENDVEdDQ1RDQUdDQ1RDQ0NHQUdUQUdDVEdHR0FUVEFDQUdHQ0dDR0NHQ0NBQ0NB
    Q0dDQ0NHR0NUQUFUClRUVFRHVEFUVFRUVEFHVEFHQUdBQ0dHR0dUVFRDQUNDQVRHVFRHR0NDQUdH
    Q1RHR1RDVENHQUFDVENDVApHQUNDVENBR0dUR0FUQ0NHQ0NDR0NDVENHR0NDVENDQ0FBQUdUR0NU
    R0dHQVRUQUNBR0dDR1RHQUdDQ0EKQ0NHQ0dDQ0NHR0NDVFRUVFRHQUdBQ0dHQUdUQ1RDR0NUQ1RH
    VENHQ0NDQUdHQ1RHR0FHVEdDQUdUR0dDCkdDR0FUQ1RDR0dDVENBQ1RHQ0FBQ0NUQ0NHQ0NUQ0ND
    R0dHVFRDQUFHQ0dBVFRDVENDVEdDQ1RDQUdDQwpUQ0NDR0FHVEFHQ1RHR0dBVFRBQ0FHR0NHQ0dD
    R0NDQUNDQUNHQ0NDR0dDVEFBVFRUVFRHVEFUVFRUVEEKR1RBR0FHQUNHR0dHVFRUQ0FDQ0FUR1RU
    R0dDQ0FHR0NUR0dUQ1RDR0FBQ1RDQ1RHQUNDVENBR0dUR0FUCkNDR0NDQ0dDQ1RDR0dDQ1RDQ0NB
    QUFHVEdDVEdHR0FUVEFDQUdHQ0dUR0FHQ0NBQ0NHQ0dDQ0NHR0NDVApUVFRUR0FHQUNHR0FHVENU
    Q0dDVENUR1RDR0NDQ0FHR0NUR0dBR1RHQ0FHVEdHQ0dDR0FUQ1RDR0dDVEMKQUNUR0NBQUNDVEND
    R0NDVENDQ0dHR1RUQ0FBR0NHQVRUQ1RDQ1RHQ0NUQ0FHQ0NUQ0NDR0FHVEFHQ1RHCkdHQVRUQUNB
    R0dDR0NHQ0dDQ0FDQ0FDR0NDQ0dHQ1RBQVRUVFRUR1RBVFRUVFRBR1RBR0FHQUNHR0dHVApUVENB
    Q0NBVEdUVEdHQ0NBR0dDVEdHVENUQ0dBQUNUQ0NUR0FDQ1RDQUdHVEdBVENDR0NDQ0dDQ1RDR0cK
    Q0NUQ0NDQUFBR1RHQ1RHR0dBVFRBQ0FHR0NHVEdBR0NDQUNDR0NHQ0NDR0dDQ1RUVFRUR0FHQUNH
    R0FHClRDVENHQ1RDVEdUQ0dDQ0NBR0dDVEdHQUdUR0NBR1RHR0NHQ0dBVENUQ0dHQ1RDQUNUR0NB
    QUNDVENDRwpDQ1RDQ0NHR0dUVENBQUdDR0FUVENUQ0NUR0NDVENBR0NDVENDQ0dBR1RBR0NUR0dH
    QVRUQUNBR0dDR0MKR0NHQ0NBQ0NBQ0dDQ0NHR0NUQUFUVFRUVEdUQVRUVFRUQUdUQUdBR0FDR0dH
    R1RUVENBQ0NBVEdUVEdHCkNDQUdHQ1RHR1RDVENHQUFDVENDVEdBQ0NUQ0FHR1RHQVRDQ0dDQ0NH
    Q0NUQ0dHQ0NUQ0NDQUFBR1RHQwpUR0dHQVRUQUNBR0dDR1RHQUdDQ0FDQ0dDR0NDQ0dHQ0NUVFRU
    VEdBR0FDR0dBR1RDVENHQ1RDVEdUQ0cKQ0NDQUdHQ1RHR0FHVEdDQUdUR0dDR0NHQVRDVENHR0NU
    Q0FDVEdDQUFDQ1RDQ0dDQ1RDQ0NHR0dUVENBCkFHQ0dBVFRDVENDVEdDQ1RDQUdDQ1RDQ0NHQUdU
    QUdDVEdHR0FUVEFDQUdHQ0dDR0NHQ0NBQ0NBQ0dDQwpDR0dDVEFBVFRUVFRHVEFUVFRUVEFHVEFH
    QUdBQ0dHR0dUVFRDQUNDQVRHVFRHR0NDQUdHQ1RHR1RDVEMKR0FBQ1RDQ1RHQUNDVENBR0dUR0FU
    Q0NHQ0NDR0NDVENHR0NDVENDQ0FBQUdUR0NUR0dHQVRUQUNBR0dDCkdUR0FHQ0NBQ0NHQ0dDQ0NH
    R0NDCj5UV08gSVVCIGFtYmlndWl0eSBjb2RlcwpUQUdHREhBQ0hBVENSR1RSR1ZUR0FHV1RBVEdZ
    VEdDVEdUQ0FCQUNEV1ZUUlRBQUdBVlZBR0FUVFROREEKR0FTTVRDVEdDQVRCWVRUQ0FBS1RUQUNN
    VEFUVEFDVFRDQVRBUkdHWUFDTVJUR1RUVFRZVEFUQUNWQUFUClRUQ1RBS0dEQUNLQURBQ1RBVEFU
    TlRBTlRDR1RUQ0FDR0JDR1lTQ0JIVEFOR0dUR0FUQ0dUQUFBR1RBQQpDVEFUQkFBQUFHQVRTVEdX
    QVRCQ1NHQUtIVFRBQkJBQUNHVFNZQ0FUR0NBQVZBVEtUU0tUQVNDR0dBQVQKV1ZBVFRUTlRDQ1RU
    Q1RUQ1RURERBR1RHR1RUR0dBVEFDVkdUVEFZTVRNVEJUQUNUVFRIQUdDVEFHQkFBCkFBR0FHS0FB
    R1RUUkFUV0FUQ0FHQVRUTUREVFRUQUFBVkFBQVRBVFRLVENZVEFBQVRUVkNOS1RUUkFDRwpBRFRB
    VEFUVFRBVEdBVFNBRFNDQUFUQVdBR0NHUlRBR1RHVEFBR1RHQUNWR1JBRFlHVEdDVEFDSFZTRFQK
    Q1RWQ0FSQ1NZVFRBQVRBVEFSQUFBQVRUVEFBVFRUQUNEQUFUVEdCQUNBR1RBWUFBQkFUQlRHQ0FH
    QlZHClRHQVRHR0RDQUFBQVRCTk1TVFRBQktBVFRHR1NUQ0NUQUdCVFRBQ1RUR1RUVEFHVFRUQVRI
    Q0dBVFNUQQpBQUdUQ0dBS0FBQVNUR1RUVFRBV0FLQ0FHQVRBVEFDVFRUVE1UVFRUR0JBVEFHQUdH
    QUdDTUFUR0FUUkEKQUFHR05DQVlEQ0NEREdBQUFHVEhHQlRBQVRDS1lUQlRBQ0JHVEJDVFRUVFRH
    RFRBQVNTV1RBQVdBQVJBClRUR0dDVEFBR1dHUkFEVFlBQ0FUQUdDVENCVEFHQVRBV0FHQ0FBVE5H
    VEFUTUFUR1RUS01NQUdUQVdUQwpDQ05UU0dBQVdBVFdDQUFBQU1BQ1RHQUFETlRZR0FUTkFBVEND
    R0FZV05DVEFBQ0dUVEFHQUdEVFRUVEMKQVRDVEdHS1JUQVZHQUFCVkNUR1dHQlRDVERWR0tBVFRC
    VENUQUFHR1ZBREFBQVZXVENUQUdHR0dBR0dHClRUQUdBQUNBQVRUQUFIVEFBVE5BQUFUR0NBVEtB
    VENUQUFZUlREVENBR1NBWVRUWUhHQVRSVFRXQVZUQQpCR05UQ0RBQ0FHQkNDUkNBR1dDUlRDQUJU
    R01NQVdHTUNUQ0FBQ0NHQVRSVEdCQ0FWQUFUQ0dURFdEQUEKQ0FZQVdBQVRXQ1RHR1RBSENDQ1RB
    QUdBVEFBQ1NDVFRBR1RHU0FBQ0FXVEJHVENEVFRER0FDV0RCQUFDCkhUVFROR1NLVFlZQUFZR0dB
    VE5UR0FUVFRBQVJUVEFNQkFBVENUQUFHVEJUQ0FUWVRBQUNUVEFEVEdUVApUQ0dBVEFDR0FBSEdH
    Q1lBVEFUQUNDV0RUS1lBVERDU0hURFRDQUFBQVRHVEdCQUNUR1NDQ1ZHQVRHVEEKVENNTUFHQ0NU
    VERBQUFCQUFUR0FBR0FHVEFBQ1RIQVRNR1ZUVEFBVEFBQ0NDR0dUVFZTQU5UR0NBQVRUCkdUR0FH
    QVRUVEFNR1RUVEFNQUFZR0NUR0FDQVlBQUFBQUdHQ0FDQU1ZVEFBR1ZHR0NUR0dBQUJWVEFDRwpH
    QVRUU1RZR1RCVkFLVEFUV0FDQ0dUR1RLQUdURFRHVEFUR1RUVEFBQUdHQUFBQUFHVEFBQ0FUQVJB
    QUEKR0dUWUNBTU5ZQUFBQlRBVEFHTlRTQVRBTkFHVENBVENDVEFUV0FES0FBQ1RSR1RNU0FDREdU
    QVRTQVlUCkFBSFNIR1RBQUJZR0FDVFlUQVRBRFRHU1RBVEFHQUdBQUFUQ0dOVEFBQUdHQUFBVENB
    R1RUR1ROQ1lNVgpUTkFDRFJUQVRCTkFUQVRBU1RBR0FBTVNDR0dHQU5SQ0tLTUNBQUFDQVRUTkFH
    VENUUk1BQVRCTVRBQ0MKQ0dUQUNUVENUQkdEU1lBQVRXR0FBQUFUR0FDQUREQ0hBS0FBQVlBVEFU
    VEtUVFRUQ0FDQU5BQ1dBR0FBCkFLQVRDQ1RUQVRUQVlLSEtDVEFBQUNBUlRBVFRUVERBVEJUVldD
    WUdDQUFUQUNUQUdHS0FBQVNUVERHQQpNR0dDSFRUSEFBVFZDQUhEUllBR0dSQ1RBVEFDR1RDTUFH
    QUdBR0NUQlRIR05BQ0FSVENDQkRDVEFBR0EKR0NHR0NUVFRBUlRBQUFHQUFUQ0NOQUdUQVdCVEdB
    Q1RUR0FBVFRBQ1dUVkFDQUdBQUFCQ0FBVE5BQUFDCkNHVE5UUkFOVFRHQVlDTUFXQkFEVEFOQUJS
    R0dUS1RIVFdUQUdUVFZDVE1CS1RBR01UVktDQ0FHQ0FOVApUVkFHU1dUVEFHQ0NHQ1JIVFRUQ0NU
    VEhOVEFUVEFBR0FBR0FBVEFHR01UUkFBUlRDVEFCR1RBQ0RUVFQKVEFUQUFWREhBSFRBVEFHQVRD
    Q1RBR1RBQUdZVFdBVERXQ0FUR0FHR0dBVEFHVEFBTURNTkdCQVNUV0FNClRTVEFUUkJBWURBQkFU
    R1RBVEFUWUNHQ0FDVEdUVFRUQUFDTUNXQlRBVEFXQUdUQVRCVFNUQVRWVFRBUgpDQ1RNVFRBQUtB
    REFUQ0FBQ1RBQVRZVFNWVEFLR0RBVFRBVEdDS1RDQVlDQUtBQVRBQ1RUS0FBTkdBR1QKQVRUU0RB
    R0FUQ0dHQUFBVEFDVFRBQVlBQVZHVEFUTUNHQ1RUR1RHVERDVEFBVFlUQVRUVFRBVFRUV0FBCkNB
    R1dSQ1RBVEdUQUdNVEdUVFRHVFRZS1ROR1RUS1RDQUdBQUNOVFJBQ0NUQUNLVEdTUkFUR1RHR0dH
    RwpDVEdUQ0FUVEFBR1RBQUFUTkdTVFRBQkNDQ0NUQ0dDQUdDVENXSFRDR0NHQUFHQ0FWQVRHQ0tB
    Q0dIQ0EKQUNBS1RUQUFUQUFDQVNBQUFEQVRUV05ZVEdUQUFUVEdUVENHVE1IQUNIVFdBVEdUR0NX
    VFRUVEdBQUhZCkFDVFRUR1RBWUFNU0FBQUNUVEFBREFBQVRBVEFHVEFCTUFUQVRZQUFUR1NHR1RB
    R1RUVEdUR1RCWUdHVApUV1NHU1ZHV01BVFRETVRDQ1dXQ0FCVENTVkFDQUdCQUFUR1RUS0FUQkdU
    Q0FBVEFBVENUVENUVEFBQUMKQVJWQUFUSEFHWUJXQ1RSV0NBQkdUV1dBQVRDVEFBR1RDQVNUQUFB
    S1RBQUdWS0JBQVRUQkdBQkFDR1RBCkFHR1RUQUFBVEFBQUFBQ1RSTURUV0JDVFRUVFRBQVRBQUFB
    R0FUTUdDQ1RBQ0tBS05UQkFHWVJBU1RHVApBU1NUQ0dUSENHQUFLVFRBVFRBVEFUVFlUVFRHVEFH
    QUFDQVRHVENBQUFBQ1RXVFdUSEdLVENDWUFBVEEKQUFHVEdHQVlUTUNZVEFBUkNTVEFBQVRXQUtU
    R0FBVFRUUkFHVENUU1NBVEFDR0FDV0FLQUFTQVREQUFBClRHWVlBQ1RTQUFDQUFIQUtUU0hZQVJH
    QVNUQVRUQVRUSEFHR1lHR0FTVFRUQkdBS0dBVFNBTkFBQ0FDRApUUkdTVFRSQUFBQUFBQUFDQUFH
    QVJUQ1ZUQUdUQUFHQVRBV0FUR1ZIQUFLQVRXR0FBQUFHVFlBSFZUQUMKVENUR1JUR1RDQVdHQVRS
    VkFBS1RDR0NBQVZDR0FTV0dHVFRSVENTQU1DQ1RBQUNBU0dXS0tBV0RBQVRHCkFDUkNCQUNUQVRH
    VEdUQ1RUQ0FBQUhHU0NUQVRBVFRUQ0dUVldBR0FBR1RBWUNLR0FSQUtTR0tBR1RBTgpUVFRDWUFD
    QVRXQVRHVENUQUFBQURNRFRXQ0FBVFNUS0RBQ0FNQUFEQURCU0FBQVRBR0dDVEhBSEFHVEEKQ0dB
    Q1ZHQUFUVEFUQUFBR0FIQ0NWQVlIR0hUVFRBQ0FUU1RUVEFUR05DQ01UQUdDQVRBVEdBVEFWQUFH
    Cj5USFJFRSBIb21vIHNhcGllbnMgZnJlcXVlbmN5CkFUQVRUVEFUQ1RUVFRDQUNUVENDVEFDQVRU
    R0dUQ0FHQUNDQVRUQVRUQ0dBQ0FDR1RHR0NHVENBVFRUVApHVENBVEFDQ0dHR1RBQVRHVFRHR0FB
    QUNBQUFBQ0dUQUNUR0FUQUFBQVRBQ1RHQUdUVEdUQUFBQ1RDVEEKQVRDQUdBVEFBQ0dDR0NUVEdH
    QVRBVFRBQUdBVFRDQUNBQ0FHR0dHVFRUQ0dHQ1RHVEFBQUFBQUFDVFRHClRHR0FHQ1RHVFRDVEdH
    R0FDQUdBVEFBR1RUR1RBQ0NUQ0dUQUNUVEFHQ1RBQVRUQUFUR0FBQ0NBQUNURwpBVFRBQ0dBVEFH
    QUFDQUFUVENUR0FHR0NDR0NDQUdHQUNBR0NDQUFBVFRUVEFBVENUVEFUQUFBR0NUR0cKQUFBQ0FH
    Q0NHR1RBVFRBR0NUVENUQ0dDQVRBQ1RUVEdDQ1RHQ0FUVEdHVEFDQ1RUQUNBR0FUQVRDQUdDCkdU
    QUdUQ0FUQVRBQ0FDQ1RDR0dUQ1RDQUdDVEFBR0NUVEdUQVRDVENUVEFHQUdUQUdUVENBQUFHQVRB
    RwpUR0dBQ0FBVEFDQ1RHVEdHQUFUQ0dBVFRHQ0FHQVRBVEdHQVRUVEFUVFRBQUNUQUNUR0FHVENU
    Q0FUVEMKQUNBQUdDVEFBR0NBQUdHQUdDQUNHVFRUVEdHVEdDQ0dHQ0FUQUNDR0FUVFRHQ1RBVENB
    VEdUQ0FHQ0FBCkFUVFRHQ0dUVEdUQVRUQ0NUQUdUVEdDQUNDQ0FUVEFBR0dDQ0FDQUNUQ0NHQUFD
    Q1RBQVRUQVRUQUNBVApDR0NBQUFHQUNBVEdUQUNHQUFHR0FDQ0NHQVRHVENHQUFUQUdBQUdHR0FH
    R0FDVEdUVENBVFRHR0FBR0MKVEFHQUNDQUdBR0dBQVRDR0NBQUFHQVRHQ0FBQ1RDVFRBQ0FBVEFB
    QUFBVENUQUFUVFRDQUdUQ0FBQ0FDCkdDQUFUVFRDVEFUQUFHR1RUVENDR0FUQUFUQUFUR0FBQ0NH
    VENUVENDQUNBR0dHR0FBVFRUR0NDQVRHQwpUQ0dUQUFBQUdUQUdUVEFBVENDQUFHVEFHQUFHQUFB
    VFRUVEdBVEFBVEdUVFRUQUFHVFRHR0NBQ0dBQUcKR0FBVFRDQUdBR0FHQVRDVFRBQ0NUQUFDQUFB
    R0dDQVRUQUdUQUdBVEdUVENDVFRHR1RUQ0FDQUNUQ0dHClRDQUFUQ0FHQUdDQUNBVEFDVEFDR0dH
    Q0dBVEFDQ0dHR0FBVEdBQ0FDQUFDQVRDQUFUR0FHQVRUR1RUQQpBR1RHQUdHVEFBVFRHQUNUVFRB
    R0FHR0FDVENHQVRDQUdUQVRBQ1RHVENBQ1RBVEdBQUNBVENHVEFUVEEKQVRUR1RUQVRDQ0dBVEFU
    QVRBQ0FDQ0FDQ0dBVFRUR0NUVEdUR0NBQUdHVFRBQ0FHQUNDQ0FUVENHQVRBCkFBVEFDQUFBQ0FD
    R0dBR0NHQVRBVFRBVFRUQUFHR0FHVEdDVEdUQ1RUQ0FBQUFHQUFUVEFUVENDQ0FDQQpDQ0dBQ0FU
    QUFHQUFDVFRDR0NUQ0NHVENBVFRDQ0FHQVRUVEFBQVRBQUNBVEFBQ0dUQUFDR0NUVFRHQ1QKR0FU
    QUFDQVRBQUNBVEFBQ0NHQUdBQVRUVEdDVFRBR0dBQUFUVFRHR0FHQ0FBVEFUVEdDQVRUR1RUVENU
    CkNBR1RDQVRDQUNBQUdHQ0NDR0NDQUFBR0FBQ1RDVEdBR0FBVENBR0dBVFRDQUFDQVRHQVRUR0dU
    QUFHQQpDVENUQVRBVEFUQVRBQUNUVEFBVFRDVFRHVEdUQ0NHR0FHQVRBR0FBQUdBR0dBQ0dBR0FH
    QVRBQ1RBQ0cKQUFBR0FBQUdUR1RBQ1RUQ0dBVEdUQVRDQUFUVENBR0FDR0NDVFRDVENUQVRDQVRD
    QUFDQVRUQVRBR0dUCkNUQ0dUQVRBVEdDVENHR0NHQ0dBVENUR0NUVENUQ1RDQ0dDQ0FBVEFHQ0ND
    Q0FUQUdUR1RBVFRUQ0FBRwpDR0NBR1RBQUNBR1RHQUFBVENHVFRBQ0dBQUdHVEFHR0dBVEdUVEdD
    VFRBVEFBVFRHVENHVEFBQ1RUQVQKQ0dDVFRBVEdUQVRDVFRUQ0FBR0FBVEdBQUNHR0NBR0NBVEFU
    QUNBVEFDR1RUQ1RBQ0NUVFRBR0NUQUNBCkFBR0NBVENDQVRBVEFDVENDQ1RDVENBVEdBVFRHQUFB
    Q1RDVFRDQ0NUQVRUVFRHVEFHQ0NBQVRBR1RHQQpBQUdDR1RBVFRBR1RBVEFBQVRUQ0dUQ0dHVFRU
    VFRDQUNUQ0dDQUFDVEdUVEFUQUNUQ1RHQ0FBQUNBQUEKQ0dBQUFHQ0NUQ0FUQUdUQUNBQUFDQ1RB
    QUFHQ1RBQ0FUQUNUVENBVENBVFRHR0NBR0FDQ0FHVEdHQ0dHClRBVFRUQ1RBQ0dHQUFHQ0FUQ0FD
    VEFUQUdBVEFUQUFBR1RUVENDQ1RUQ0FUR1RBQ0dUQ1RHVFRBQUNDQQpUQVRDQUNBQUdBQUFDVEdD
    VEFUQ1RDVEdUQ0FDR1RBQUNBQVRUQ0FDR0NHQ0NUVEFUQ0dDQ0FBQVRHVFQKQ0FUQVRBVEdDR0NH
    R1RBVEFDR1RBVEdBQUNHQUFUQUNUQUFUVEFHVEFUQUFDR0dBR0dBVFRDQUNHR0dBCkdHR0FUQUNU
    VEdHR0dDQVRUVEFUQUFBVENHVENUQUFBQUFUVFRUQ1RBVENBR0NBQ1RUR0NHR0dUVEFUQQpHVEdH
    QVRUQUNUQUdHQ0FBQ0FUQUFUQVRUQ1RHVEFUVEdHVENDQUFBVEdBQ0dDVEFUQUdBVEFBQVRUQUcK
    Q0FBQUFUQUNBVFRHVFRUQ0NBVFRUQVRHVEFBR1RDR0FBQUNUQ0NBR0dBQ1RDQ0NHR0dBQUNDQUdU
    VEFBCkFDQ0dUQ1RHR0FBQUFHQUNBQ0FUVEdUR0FHQ0dHR0FDVFRDQUFUR0FUQUdDVFRUQ0FBVEdB
    R0NUVENUQwpBVEdDVFRHR0dHVENUR1RBQ0FUQVRBVEdUVEdHQ0dBQUFUVEFUQ0dUQ1RHVEFUVENU
    R1RUQVRHQ1RUVEcKQVRDQVRHR0dUVEFUVEFHVEFUQUdUR1RDQ0dHVFRBQUdUQUNDQUFUQUNDR0NU
    QUdBR0FDQ0NHQUNDVEFBCkdUQ0dBVEFBQ1RBQUNHQVRDQVRDR0FDR1RBQUdHQVRDR1RDVENHQVRD
    QUdUQUNUVENBR1RDVEFHQVRDVApHR0dBQVRBR1RBQUNUQ0dUVEFHVEdBQUNUQVRHVENHVEdUQ0FU
    QUFDVENUQUFBQVRHQ0FBVENBQUFUQ1QKVEFUVEFUVEdBR1RBVFRHQVRUQVRBVEFBQUdDQVRDQ0dD
    VFRBR0NUVFRBQ0NDVENBQUFUR1RUQVRBVEdDCkFBVFRUQUFBR0NHQ1RUR0FUQVRDR1RDVEFDVENB
    QUdUVENBR0dUVFRDQUNBVEdHQ0NHQ0FBQ0dUR0FDRwpUVEFUVEFHQUdHVEdHR1RDQVRDQVRDVENU
    R0FHR0NUQUdUR0FUR1RUR0FBVEFDVENBVFRHQUFUR0dHQUEKR1RHR0FBVEFDQ0FUR0NUQ0dUQUdH
    VEFBQ0FHQ0FUR0FDQ1RBVEFBQUFUQVRBQ1RBVEdHR1RHVEdUR0dUCkFHQVRDQUFUQVRUR1RUQ0FB
    R0NBVEFUQ0dUQUFDQUFUQUFDR0dDVEdBQUFUR1RUQUNUR0FDQVRHQUFBRwpBR0dHQUdUQ0NBQUFD
    Q0FUVENUQUFDQUdDVEdBVENBQUdUQ0dUQ1RBQUFBQUNHQ0NUR0dUVENBR0NDVFQKQUFHQUdUVEFU
    QUFHQ0NBR0FDQUFBVFRHVEFUQ0FBVEFHQUdBQVRDQ0dUQUFBVFRDQ1RDR0dDQ0FBQ0NUCkNUVEdD
    QUFBR0FDQVRDQUNUQVRDQUFUQVRBQ1RBQ0NHVEdBVENUVEFBVFRBR1RHQUFDVFRBVEFUQUFBVApB
    VENUQUNBQUNDQUdBVFRDQUFDR0dBQUFBR0NUVFRBR1RHR0FUVEFHQUFBVFRHQ0NBQUdBQVRDQUNB
    VFQKQ0FUR1RHR0dUVENHQUFUR0NUVFRBR1RBQVRBQ0NBVFRUQ0dDQ0dBR1RBR1RDQUNUVENHQ1RH
    QUFDVEdUCkNHVEFBQVRUR0NUQVRHQUNBVEFBVENHQUFBQUdHQVRUR1RDQUFHQUdUQ0dBVFRBQ1RH
    Q0dHQUNUQUFUQQpBVENDQ0NBQ0dHR0dHVEdHVENUQ0FUR1RDVENDQ0NBR0dDR0FHVEdHR0dBQ0dH
    VFRHQVRBQUFDQUNHQ1QKR0NBVENHQ0dHQUNUR0FUR1RUQ0NDQUdUQVRUQUNBVEFHVENBQ0FUVEdH
    QVRUR0NHQUdUQUdUQ1RBQ0NUCkFUVFRBVEdBR0NHQUdBR0FUR0NDVENUQUFDVEFDVFRDR0FDVFRU
    VEFBQUFDQ1RUVENDQUNHQ0NBR1RBVApUQ0dHQ0dBQUFHR0dBQUdUQVRUQUFHR0dUVEdUQ0FUQUFU
    VEFBR0NUR0FUQUNDQUNUVENBR0FDVFRUR0MKVENUQUNUVENUR1RDVFRUQ0FUVEdHVFRUQUdUQUFB
    R1RDVEdUQ0NBVFRDR1RDR0FHQUNDR1RDVFRUVEdDCkFHQ0NUQ0FUVENUQUNDQUFDVEdDVENDR0FD
    VENUVEFHVENUR0NUVENUQ0NDQUdDR1RUQVRBQUNBQUdBRwpHQ0FUVFRUR1RDQVRDQ1RUQUFBQUNB
    QVRBQVRBQUFHQUFDVENHR0FHQ0FDVEdBVEFUQUFUR0FDVEdBQVQKVEFHQUFDQ0dDVFRBQUFBQVRB
    Q0FBQ0dBQVRBR0FUQUFHQUNUQVRDR0dBVEFBR0FUQ1RBQVRBVEdUQUdUCkdBVFRBQUdDQ0NUVFRB
    VFRBQVRUQUFUQUFUQUdUVEFDQ0NUVFRDVEdBVEdUQUFDR0NHQUNBVEFUVEFDRwpBVFRUQUdUR0dD
    QUNHVENUR0FBVFRHQ0FBQUdDQUdBVENUQ1RBQ0NDR0FUVFRUVEFUVEFUQUFBVENDQ0cKVEFUQUNB
    VENUVEdBQ1RUR0FHVEFBVFRHVFRDQVRDVFRUVFRBVEFUQ1RDVFRDR1RBQ1RBQ0FBQVRBQVRUCkFB
    VEFUQ1RDQUFDQ0NHVEFUVEdUR1RHQVRUQ1RBQVRUQUNDQUFDQUdBQVRBQ0dBR0dBR0dUVFRUVEdD
    VApUQUdHR0NDQVRBVEFUQUFUR0FBVENUQVRDVENHVFRUQVRUQ0dDR0dBQUNDQ0dBR0FUQUFDQVRU
    QUNHQVQKR1RBQUNUQVRUVFRBR0FHQUFDVFRBQVRBQ0FBR0FBQUNBVFRHQ1RHQVRUQUNUQ0FUQUFD
    VEFBQVRHQ1RUCkdHVEFBVEFUQVRDQ1RDQUdUR0NDQ0NUQUNDQVRDVFRUVEFDR0NBR0dHQVRHVEFB
    VFRBQ1RUQUdHQVRUQwpBVFRHVEdUQUFHQUFUVEFDQUFUR0FBQ0dBVEdHQVRBVEdBQUdHQ0FUR1RU
    R0NHQUdHVEdUVENDVFRHR1QKQVRHVEdBQUdUVENHQ0FHR0dDQUFDQUFBQUFUVFRDR0NBR0FBVEFH
    R0NDVENBQUFHVEFUVEdHVEFBQUdBCkFHQUNBQUNUQUFUQ0FUQ0FDR0FHQ1RUQ1RHQVRBVENBQVRB
    Q0dBQUNHQUdUQ0NUR1RHQVRHR0FUR0FBQQpHQUFBR1RDR1RBVENHQUFBQVRHVENBQUdBR1RDVEdD
    Q0NBQVRHVEFBQ1RUQUNUVENBQUFBQUFUQUFDR0MKVFRDQ0dDQ0FBR1RBQ0dUVENHQUFUQUFBQ0dU
    QUFUVFRUQUFBQUFUQUNBVEFBR0dHR1RHVFRBR0FBQUdUCkFBR0NHQUNHR0dBVEFUQUFHVFRBR0FD
    VENBQUdBVFRDQ0dDQ0dUQUFBQUNHQUdBQ1RHQVRUQ0NHQUFHQQpUVEdUVENHVEdHQVRDVEdHVENB
    VEdBQ1RUVENBQ1RHQUdUQUFHR0FHVFRUQ0dBQ0FUQVRHVENBQVRBQUEKQ0FDQUFBQUFUQUdBQUdD
    VEFUVENHQVRDVEdBQUFBQVRBVFRBR0dBQ0FBR0FBQUNUQVRDVENBQ0dDVEFHCkNDQ0FHQUFUQVRU
    Q0FDVENBQ0NDQUNHR0dDR0FUQUNUQUFBR0NBQ1RBVEFUQUdUQ0dDR1RHQVRUQUNUQQpUQUNBVEFU
    R0dUQUNBQ0FUQUFHQUFUQ0FDR0FUQ0FHR1RUQ1RDQUFUVFRUQ0FBQ0FBVEFUQVRHVFRUQVQKVFRH
    Q0FUQUdHVEFBVEFUVEFHR0NDVFRUQUFHQUdBQUdHQVRHR0dUR0FHQVRBQ1RDQ0dHR0dBVEdHQ0dH
    CkNBQVRBQUFHQUFBQUFDQUNHQVRBVEdBR1RBQVRBR0dBVENDVEFBVEFUQ1RUR0dDR0FHQUdBQ1RU
    QUFHRwpUQUNHQUFUVFRUR0NHQ0FBVENUQVRUVFRUVEFDVFRHR0NDQUdBQVRUQ0FUR1RBVEdHVEFU
    QUFHVEFDR0EKQUNUVFRUVFRHQVRDQUNUVFRDQVRHR0NUQUNDVEdBVFRBR0dBVEFHVFRUR0FHR0FB
    VFRUQ0NDQUFBVEFUCkFDQ0dBVFRUQUFUQVRBQ0FDVEFHR0dDVFRHVENBQ1RUVEdBR1RDQUdBQUFB
    QUdBQVRBVEFBVFRBQ1RUQQpHR0dUQUFUR0NUR0NBVEFDQVRBVFRDVFRBVEFUVEdDQUFBR0dUVENU
    Q1RHR0dUQUFUQ1RUR0FHQ0NUVEMKQUNHQVRBQ0NUR0dUR0FBR1RHVFQK
