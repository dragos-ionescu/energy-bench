implementation: graalvm
name: binary-trees
description: | # https://benchmarksgame-team.pages.debian.net/benchmarksgame/description/binarytrees.html#binarytrees
    The work is to fully create perfect binary trees - before any tree nodes are GC'd - using at-minimum the number of allocations of Jeremy Zerfas's C program. Don't optimize away the work.
    Leaf nodes must be the same as interior nodes - the same memory allocation. Don't optimize away the work.
    We ask that contributed programs not only give the correct result, but also use the same algorithm to calculate that result.
    Each program should:
        - define a tree node class and methods, or a tree node record and procedures, or an algebraic data type and functions, orâ€¦
        - allocate a binary tree to 'stretch' memory, check it exists, and deallocate it
        - allocate a long-lived binary tree which will live-on while other trees are allocated and deallocated
        - allocate, walk, and deallocate many bottom-up binary trees
            - allocate a tree
            - walk the tree, counting the nodes (and maybe deallocate the nodes)
            - deallocate the tree
        - check that the long-lived binary tree still exists
code: | # https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/binarytrees-graalvmaot-7.html
    /**
     * The Computer Language Benchmarks Game
     * https://salsa.debian.org/benchmarksgame-team/benchmarksgame/
     *
     * based on Jarkko Miettinen's Java program
     * contributed by Tristan Dupont
     * *reset*
     */

    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Executors;
    import java.util.concurrent.TimeUnit;

    public class Program {

        private static final int MIN_DEPTH = 4;
        private static ExecutorService EXECUTOR_SERVICE;

        private static void run_benchmark(final String[] args) throws Exception {
            int n = 0;
            if (0 < args.length) {
                n = Integer.parseInt(args[0]);
            }

            final int maxDepth = n < (MIN_DEPTH + 2) ? MIN_DEPTH + 2 : n;
            final int stretchDepth = maxDepth + 1;

            System.out.println("stretch tree of depth " + stretchDepth + "\t check: "
               + bottomUpTree( stretchDepth).itemCheck());

            final TreeNode longLivedTree = bottomUpTree(maxDepth);

            final String[] results = new String[(maxDepth - MIN_DEPTH) / 2 + 1];

            EXECUTOR_SERVICE = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());

            for (int d = MIN_DEPTH; d <= maxDepth; d += 2) {
                final int depth = d;
                EXECUTOR_SERVICE.execute(() -> {
                    int check = 0;

                    final int iterations = 1 << (maxDepth - depth + MIN_DEPTH);
                    for (int i = 1; i <= iterations; ++i) {
                        final TreeNode treeNode1 = bottomUpTree(depth);
                        check += treeNode1.itemCheck();
                    }
                    results[(depth - MIN_DEPTH) / 2] =
                       iterations + "\t trees of depth " + depth + "\t check: " + check;
                });
            }

            EXECUTOR_SERVICE.shutdown();
            EXECUTOR_SERVICE.awaitTermination(120L, TimeUnit.SECONDS);

            for (final String str : results) {
                System.out.println(str);
            }

            System.out.println("long lived tree of depth " + maxDepth +
                "\t check: " + longLivedTree.itemCheck());
        }

        public static void main(final String[] args) throws Exception {
            EnergySignal signal = new EnergySignal();
            
            while (signal.startSignal() > 0) {
                run_benchmark(args);
                signal.stopSignal();
            }
        }

        private static TreeNode bottomUpTree(final int depth) {
            if (0 < depth) {
                return new TreeNode(bottomUpTree(depth - 1), bottomUpTree(depth - 1));
            }
            return new TreeNode();
        }

        private static final class TreeNode {
            private final TreeNode left;
            private final TreeNode right;

            private TreeNode(final TreeNode left, final TreeNode right) {
                this.left = left;
                this.right = right;
            }

            private TreeNode() {
                this(null, null);
            }

            private int itemCheck() {
                // if necessary deallocate here
                if (null == left) {
                    return 1;
                }
                return 1 + left.itemCheck() + right.itemCheck();
            }
        }
    }
dependencies:
    - name: graalvmPackages.graalvm-ce
      version: 24.0.1
---
args: [21]
expected_stdout: |
    stretch tree of depth 22	 check: 8388607
    2097152	 trees of depth 4	 check: 65011712
    524288	 trees of depth 6	 check: 66584576
    131072	 trees of depth 8	 check: 66977792
    32768	 trees of depth 10	 check: 67076096
    8192	 trees of depth 12	 check: 67100672
    2048	 trees of depth 14	 check: 67106816
    512	 trees of depth 16	 check: 67108352
    128	 trees of depth 18	 check: 67108736
    32	 trees of depth 20	 check: 67108832
    long lived tree of depth 21	 check: 4194303
