implementation: openjdk
name: division-loop
description: |
    Consider for a given M the problem of finding the least integer n such that 1/1 + 1/2 + 1/3 + ... + 1/n >= M.
    For M = 20 the answer is n = 272400600 and the loop performs that many iterations.
    Each iteration involves a floating-point comparison, a floating-point division and a floating-point addition, as well as an integer increment.
code: |
    public class Program {
        static void run(int m) {
            double sum = 0.0;
            int n = 0;
            while (sum < m) {
                n++;
                sum += 1.0 / n;
            }
            System.out.printf("%d\n", n);
        }

        public static void main(String[] args) throws Throwable {
            EnergySignal signal = new EnergySignal();
            int m = Integer.parseInt(args[0]);
            while (signal.startSignal() > 0) {
                run(m);
                signal.stopSignal();
            }
        }
    }
dependencies:
    - jdk23 # 23.0.1+11
---
args: [20]
expected_stdout: |
    272400600
