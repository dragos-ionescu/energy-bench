implementation: cs
name: division-loop
description: |
    Consider for a given M the problem of finding the least integer n such that 1/1 + 1/2 + 1/3 + ... + 1/n >= M.
    For M = 20 the answer is n = 272400600 and the loop performs that many iterations.
    Each iteration involves a floating-point comparison, a floating-point division and a floating-point addition, as well as an integer increment.
code: |
    using System.Runtime.InteropServices;
    public class Program {
        [DllImport("libenergy_signal", EntryPoint = "start_signal")]
        public static extern bool start_signal();

        [DllImport("libenergy_signal", EntryPoint = "stop_signal")]
        public static extern void stop_signal();

        static void run(int m) {
            double sum = 0.0;
            int n = 0;
            while (sum < m) {
                n++;
                sum += 1.0 / n;
            }
            Console.WriteLine(n);
        }

        public static void Main(string[] args) {
            int m = int.Parse(args[0]);
            while (start_signal()) {
                run(m);
                stop_signal();
            }
        }
    }
dependencies:
    - dotnet-sdk_9 # 9.0.203
options:
    - -c Release
    - -p:OutputType=Exe
    - -p:ImplicitUsings=enable
    - -p:Nullable=enable
    - -p:AllowUnsafeBlocks=true
    - -p:ServerGarbageCollection=true
    - -p:ConcurrentGarbageCollection=true
    - -p:OptimizationPreference=Speed
    - -p:IlcInstructionSet=native
---
args: [20]
expected_stdout: |
    272400600
