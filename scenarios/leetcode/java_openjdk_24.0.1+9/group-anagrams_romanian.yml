implementation: openjdk
name: gruparea-anagramelor
description: | # https://leetcode.com/problems/group-anagrams/description/
    Dată fiind o listă de șiruri de caractere `strs`, grupează anagramele împreună.
    Poți returna răspunsul în orice ordine.

    Exemplu:
    Input: strs = ["eat", "tea", "tan", "ate", "nat", "bat"]
    Output: [["bat"], ["nat", "tan"], ["ate", "eat", "tea"]]

    Explicație:
    - Nu există niciun șir în `strs` care să poată fi rearanjat pentru a forma „bat”.
    - Șirurile „nat” și „tan” sunt anagrame deoarece pot fi rearanjate unul în celălalt.
    - Șirurile „ate”, „eat” și „tea” sunt anagrame deoarece pot fi rearanjate unul în celălalt.

    Constrângeri:
    - 1 <= strs.length <= 10⁴
    - 0 <= strs[i].length <= 100
    - strs[i] conține doar litere mici ale alfabetului englez.
code: | # https://leetcode.com/problems/group-anagrams/solutions/19176/share-my-short-java-solution
    import java.util.*;

    public class Program {
        public static List<List<String>> groupAnagrams(String[] strs) {
            if (strs == null || strs.length == 0) return new ArrayList<>();
            Map<String, List<String>> map = new HashMap<>();
            for (String s : strs) {
                char[] ca = new char[26];
                for (char c : s.toCharArray()) ca[c - 'a']++;
                String keyStr = String.valueOf(ca);
                if (!map.containsKey(keyStr)) map.put(keyStr, new ArrayList<>());
                map.get(keyStr).add(s);
            }
            return new ArrayList<>(map.values());
        }

        public static void main(String[] args) {
            if (args == null || args.length == 0) {
                System.out.println("[]");
                return;
            }
            List<List<String>> res = groupAnagrams(args);

            if (res.isEmpty()) {
                System.out.println("[]");
                return;
            }

            StringBuilder sb = new StringBuilder();
            sb.append("[");
            for (int i = 0; i < res.size(); i++) {
                if (i > 0) sb.append(", ");
                sb.append("[");
                List<String> group = res.get(i);
                for (int j = 0; j < group.size(); j++) {
                    if (j > 0) sb.append(", ");
                    sb.append("\"").append(group.get(j)).append("\"");
                }
                sb.append("]");
            }
            sb.append("]");
            System.out.println(sb.toString());
        }
    }
dependencies:
    - name: jdk24
      version: 24.0.1+9
---
args: ["x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x"]
expected_stdout: |
    [["x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x", "x"]]
---
args: ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t"]
expected_stdout: |
    [["m"], ["n"], ["p"], ["r"], ["a"], ["t"], ["j"], ["h"], ["i"], ["k"], ["o"], ["d"], ["b"], ["q"], ["f"], ["e"], ["l"], ["c"], ["g"], ["s"]]
---
args: ["ytclsllouu", "hhjm", "vvpzifp", "hdswrgllp", "qbloyuljd", "vwxocb", "mtsrj"]
expected_stdout: |
    [["vwxocb"], ["mtsrj"], ["qbloyuljd"], ["vvpzifp"], ["ytclsllouu"], ["hdswrgllp"], ["hhjm"]]
---
args: ["idgs", "cmkopf", "tvhtnbgwi", "zvri"]
expected_stdout: |
    [["zvri"], ["idgs"], ["cmkopf"], ["tvhtnbgwi"]]
---
args: ["epdwfetvw", "s"]
expected_stdout: |
    [["epdwfetvw"], ["s"]]
