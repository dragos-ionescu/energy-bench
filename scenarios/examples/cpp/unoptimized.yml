implementation: cpp
name: matrix-multiplication
description: |
    Create two square matrices of size NÃ—N.
    Each cell within these two matrices will be initialized with the sum of their row and column indices.
    Multiply the two matrices and output the contents of the last cell.
code: |
    #include <iostream>
    #include <vector>

    int main(int argc, char *argv[]) {
        int n = std::stoi(argv[1]);

        std::vector<double> A(n * n);
        std::vector<double> B(n * n);
        std::vector<double> C(n * n);

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                A[i*n + j] = B[i*n + j] = i + j;
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                double sum = 0.0;
                for (int k = 0; k < n; k++) {
                    sum += A[i*n + k] * B[k*n + j];
                }
                C[i*n + j] = sum;
            }
        }

        std::cout << static_cast<int>(C[n*n - 1]) << std::endl;
        return 0;
    }
dependencies:
    - name: gcc
options:
    - -pipe
    - -O3
    - -march=native
    - -fomit-frame-pointer
---
args: [200]
expected_stdout: |
    18487100
